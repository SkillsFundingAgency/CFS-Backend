// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CalculateFunding.Profiling.GWTs.Features.PESportsPremium
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ValidateTransactionDataFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "ValidateTransactionData.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ValidateTransactionData", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "ValidateTransactionData")))
            {
                global::CalculateFunding.Profiling.GWTs.Features.PESportsPremium.ValidateTransactionDataFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A991 Fail: Unrecognised FSP")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ValidateTransactionData")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ADPIntegrationTest")]
        public virtual void A991FailUnrecognisedFSP()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A991 Fail: Unrecognised FSP", null, new string[] {
                        "ADPIntegrationTest"});
#line 8
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriod",
                        "AllocationValue"});
            table43.AddRow(new string[] {
                        "AY1819",
                        "10000.00"});
#line 9
    testRunner.Given("an ADP request exists for OrgId \'?\' IdentifierName \'?\' Identifier \'?\' AllocationS" +
                    "tartDate \'?\' AllocationEndDate \'?\' and FSP \'PESPORTPREM11819\' as follows", ((string)(null)), table43, "Given ");
#line 13
    testRunner.When("the request is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("the service returns HTTP status code \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A992 Fail: Unrecognised DistributionPeriod")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ValidateTransactionData")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ADPIntegrationTest")]
        public virtual void A992FailUnrecognisedDistributionPeriod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A992 Fail: Unrecognised DistributionPeriod", null, new string[] {
                        "ADPIntegrationTest"});
#line 19
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriod",
                        "AllocationValue"});
            table44.AddRow(new string[] {
                        "FY1819",
                        "10000.00"});
#line 20
    testRunner.Given("an ADP request exists for OrgId \'?\' IdentifierName \'?\' Identifier \'?\' AllocationS" +
                    "tartDate \'?\' AllocationEndDate \'?\' and FSP \'PSG1819\' as follows", ((string)(null)), table44, "Given ");
#line 24
    testRunner.When("the request is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
 testRunner.Then("the service returns HTTP status code \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A993 Fail: Dates within 1819 but EndDate before StartDate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ValidateTransactionData")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ADPIntegrationTest")]
        public virtual void A993FailDatesWithin1819ButEndDateBeforeStartDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A993 Fail: Dates within 1819 but EndDate before StartDate", null, new string[] {
                        "ADPIntegrationTest"});
#line 30
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriod",
                        "AllocationValue"});
            table45.AddRow(new string[] {
                        "AY1819",
                        "10000.00"});
#line 31
    testRunner.Given("an ADP request exists for OrgId \'?\' IdentifierName \'?\' Identifier \'?\' AllocationS" +
                    "tartDate \'01/06/2019\' AllocationEndDate \'20/12/2018\' and FSP \'PSG1819\' as follow" +
                    "s", ((string)(null)), table45, "Given ");
#line 35
    testRunner.When("the request is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriod",
                        "AllocationValue"});
            table46.AddRow(new string[] {
                        "AY1819",
                        "10000.00"});
#line 38
    testRunner.Then("an ADP Allocation Profile response is created for OrgId \'?\' IdentifierName \'?\' Id" +
                    "entifier \'?\' AllocationStartDate \'01/06/2019\' AllocationEndDate \'20/12/2018\' and" +
                    " FSP \'PSG1819\' as follows", ((string)(null)), table46, "Then ");
#line 43
 testRunner.Then("the service returns HTTP status code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A994 Fail: Valid date format but StartDate out of bounds")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ValidateTransactionData")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ADPIntegrationTest")]
        public virtual void A994FailValidDateFormatButStartDateOutOfBounds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A994 Fail: Valid date format but StartDate out of bounds", null, new string[] {
                        "ADPIntegrationTest"});
#line 46
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriod",
                        "AllocationValue"});
            table47.AddRow(new string[] {
                        "AY1819",
                        "25000.00"});
#line 47
    testRunner.Given("an ADP request exists for OrgId \'?\' IdentifierName \'?\' Identifier \'?\' AllocationS" +
                    "tartDate \'01/09/2015\' AllocationEndDate \'?\' and FSP \'PSG1819\' as follows", ((string)(null)), table47, "Given ");
#line 51
    testRunner.When("the request is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriod",
                        "AllocationValue"});
            table48.AddRow(new string[] {
                        "AY1819",
                        "25000.00"});
#line 54
    testRunner.Then("an ADP Allocation Profile response is created for OrgId \'?\' IdentifierName \'?\' Id" +
                    "entifier \'?\' AllocationStartDate \'01/09/2015\' AllocationEndDate \'?\' and FSP \'PSG" +
                    "1819\' as follows", ((string)(null)), table48, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "Period",
                        "Occurrence",
                        "PeriodYear",
                        "PeriodType",
                        "ProfileValue",
                        "DistributionPeriod"});
            table49.AddRow(new string[] {
                        "October",
                        "1",
                        "2018",
                        "CalendarMonth",
                        "14583.00",
                        "AY1819"});
            table49.AddRow(new string[] {
                        "April",
                        "1",
                        "2019",
                        "CalendarMonth",
                        "10417.00",
                        "AY1819"});
#line 58
    testRunner.And("an ADP Delivery Profile response is created which contains the following", ((string)(null)), table49, "And ");
#line 64
 testRunner.Then("the service returns HTTP status code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A995 Fail: Valid date format but EndDate out of bounds")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ValidateTransactionData")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ADPIntegrationTest")]
        public virtual void A995FailValidDateFormatButEndDateOutOfBounds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A995 Fail: Valid date format but EndDate out of bounds", null, new string[] {
                        "ADPIntegrationTest"});
#line 67
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriod",
                        "AllocationValue"});
            table50.AddRow(new string[] {
                        "AY1819",
                        "72000.00"});
#line 68
    testRunner.Given("an ADP request exists for OrgId \'?\' IdentifierName \'?\' Identifier \'?\' AllocationS" +
                    "tartDate \'?\' AllocationEndDate \'31/08/2022\' and FSP \'PSG1819\' as follows", ((string)(null)), table50, "Given ");
#line 72
    testRunner.When("the request is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriod",
                        "AllocationValue"});
            table51.AddRow(new string[] {
                        "AY1819",
                        "72000.00"});
#line 75
    testRunner.Then("an ADP Allocation Profile response is created for OrgId \'?\' IdentifierName \'?\' Id" +
                    "entifier \'?\' AllocationStartDate \'?\' AllocationEndDate \'31/08/2022\' and FSP \'PSG" +
                    "1819\' as follows", ((string)(null)), table51, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "Period",
                        "Occurrence",
                        "PeriodYear",
                        "PeriodType",
                        "ProfileValue",
                        "DistributionPeriod"});
            table52.AddRow(new string[] {
                        "October",
                        "1",
                        "2018",
                        "CalendarMonth",
                        "42000.00",
                        "AY1819"});
            table52.AddRow(new string[] {
                        "April",
                        "1",
                        "2019",
                        "CalendarMonth",
                        "30000.00",
                        "AY1819"});
#line 79
    testRunner.And("an ADP Delivery Profile response is created which contains the following", ((string)(null)), table52, "And ");
#line 85
 testRunner.Then("the service returns HTTP status code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
