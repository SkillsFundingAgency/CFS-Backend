// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CalculateFunding.Profiling.GWTs.Features.PESportsPremium
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class HappyPathFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "HappyPath.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "HappyPath", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "HappyPath")))
            {
                global::CalculateFunding.Profiling.GWTs.Features.PESportsPremium.HappyPathFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A981 Integer allocation value without rounding")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "HappyPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ADPIntegrationTest")]
        public virtual void A981IntegerAllocationValueWithoutRounding()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A981 Integer allocation value without rounding", null, new string[] {
                        "ADPIntegrationTest"});
#line 8
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriod",
                        "AllocationValue"});
            table16.AddRow(new string[] {
                        "AY1819",
                        "22284.00"});
#line 9
 testRunner.Given("an ADP request exists for OrgId \'ORG0017981\' IdentifierName \'?\' Identifier \'?\' Al" +
                    "locationStartDate \'?\' AllocationEndDate \'?\' and FSP \'PSG1819\' as follows", ((string)(null)), table16, "Given ");
#line 13
 testRunner.When("the request is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriod",
                        "AllocationValue"});
            table17.AddRow(new string[] {
                        "AY1819",
                        "22284.00"});
#line 15
 testRunner.Then("an ADP Allocation Profile response is created for OrgId \'ORG0017981\' IdentifierNa" +
                    "me \'?\' Identifier \'?\' AllocationStartDate \'?\' AllocationEndDate \'?\' and FSP \'PSG" +
                    "1819\' as follows", ((string)(null)), table17, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Period",
                        "Occurrence",
                        "PeriodYear",
                        "PeriodType",
                        "ProfileValue",
                        "DistributionPeriod"});
            table18.AddRow(new string[] {
                        "October",
                        "1",
                        "2018",
                        "CalendarMonth",
                        "12999.00",
                        "AY1819"});
            table18.AddRow(new string[] {
                        "April",
                        "1",
                        "2019",
                        "CalendarMonth",
                        "9285.00",
                        "AY1819"});
#line 19
 testRunner.And("an ADP Delivery Profile response is created which contains the following", ((string)(null)), table18, "And ");
#line 25
 testRunner.And("the service returns HTTP status code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A982 Integer allocation value with rounding")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "HappyPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ADPIntegrationTest")]
        public virtual void A982IntegerAllocationValueWithRounding()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A982 Integer allocation value with rounding", null, new string[] {
                        "ADPIntegrationTest"});
#line 28
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriod",
                        "AllocationValue"});
            table19.AddRow(new string[] {
                        "AY1819",
                        "7514.00"});
#line 29
 testRunner.Given("an ADP request exists for OrgId \'ORG0017982\' IdentifierName \'?\' Identifier \'?\' Al" +
                    "locationStartDate \'?\' AllocationEndDate \'?\' and FSP \'PSG1819\' as follows", ((string)(null)), table19, "Given ");
#line 33
 testRunner.When("the request is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriod",
                        "AllocationValue"});
            table20.AddRow(new string[] {
                        "AY1819",
                        "7514.00"});
#line 35
 testRunner.Then("an ADP Allocation Profile response is created for OrgId \'ORG0017982\' IdentifierNa" +
                    "me \'?\' Identifier \'?\' AllocationStartDate \'?\' AllocationEndDate \'?\' and FSP \'PSG" +
                    "1819\' as follows", ((string)(null)), table20, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Period",
                        "Occurrence",
                        "PeriodYear",
                        "PeriodType",
                        "ProfileValue",
                        "DistributionPeriod"});
            table21.AddRow(new string[] {
                        "October",
                        "1",
                        "2018",
                        "CalendarMonth",
                        "4383.00",
                        "AY1819"});
            table21.AddRow(new string[] {
                        "April",
                        "1",
                        "2019",
                        "CalendarMonth",
                        "3131.00",
                        "AY1819"});
#line 39
 testRunner.And("an ADP Delivery Profile response is created which contains the following", ((string)(null)), table21, "And ");
#line 45
 testRunner.And("the service returns HTTP status code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A983 Non-integer allocation value")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "HappyPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ADPIntegrationTest")]
        public virtual void A983Non_IntegerAllocationValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A983 Non-integer allocation value", null, new string[] {
                        "ADPIntegrationTest"});
#line 48
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriod",
                        "AllocationValue"});
            table22.AddRow(new string[] {
                        "AY1819",
                        "15217.50"});
#line 49
 testRunner.Given("an ADP request exists for OrgId \'ORG0017983\' IdentifierName \'?\' Identifier \'?\' Al" +
                    "locationStartDate \'?\' AllocationEndDate \'?\' and FSP \'PSG1819\' as follows", ((string)(null)), table22, "Given ");
#line 53
 testRunner.When("the request is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriod",
                        "AllocationValue"});
            table23.AddRow(new string[] {
                        "AY1819",
                        "15217.50"});
#line 55
 testRunner.Then("an ADP Allocation Profile response is created for OrgId \'ORG0017983\' IdentifierNa" +
                    "me \'?\' Identifier \'?\' AllocationStartDate \'?\' AllocationEndDate \'?\' and FSP \'PSG" +
                    "1819\' as follows", ((string)(null)), table23, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Period",
                        "Occurrence",
                        "PeriodYear",
                        "PeriodType",
                        "ProfileValue",
                        "DistributionPeriod"});
            table24.AddRow(new string[] {
                        "October",
                        "1",
                        "2018",
                        "CalendarMonth",
                        "8877.00",
                        "AY1819"});
            table24.AddRow(new string[] {
                        "April",
                        "1",
                        "2019",
                        "CalendarMonth",
                        "6340.50",
                        "AY1819"});
#line 59
 testRunner.And("an ADP Delivery Profile response is created which contains the following", ((string)(null)), table24, "And ");
#line 65
 testRunner.And("the service returns HTTP status code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A984 Zero allocation value")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "HappyPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ADPIntegrationTest")]
        public virtual void A984ZeroAllocationValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A984 Zero allocation value", null, new string[] {
                        "ADPIntegrationTest"});
#line 68
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriod",
                        "AllocationValue"});
            table25.AddRow(new string[] {
                        "AY1819",
                        "0.00"});
#line 69
 testRunner.Given("an ADP request exists for OrgId \'ORG0017984\' IdentifierName \'?\' Identifier \'?\' Al" +
                    "locationStartDate \'?\' AllocationEndDate \'?\' and FSP \'PSG1819\' as follows", ((string)(null)), table25, "Given ");
#line 73
 testRunner.When("the request is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriod",
                        "AllocationValue"});
            table26.AddRow(new string[] {
                        "AY1819",
                        "0.00"});
#line 75
 testRunner.Then("an ADP Allocation Profile response is created for OrgId \'ORG0017984\' IdentifierNa" +
                    "me \'?\' Identifier \'?\' AllocationStartDate \'?\' AllocationEndDate \'?\' and FSP \'PSG" +
                    "1819\' as follows", ((string)(null)), table26, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Period",
                        "Occurrence",
                        "PeriodYear",
                        "PeriodType",
                        "ProfileValue",
                        "DistributionPeriod"});
            table27.AddRow(new string[] {
                        "October",
                        "1",
                        "2018",
                        "CalendarMonth",
                        "0.00",
                        "AY1819"});
            table27.AddRow(new string[] {
                        "April",
                        "1",
                        "2019",
                        "CalendarMonth",
                        "0.00",
                        "AY1819"});
#line 79
 testRunner.And("an ADP Delivery Profile response is created which contains the following", ((string)(null)), table27, "And ");
#line 85
 testRunner.And("the service returns HTTP status code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A985 Negative integer allocation value")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "HappyPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ADPIntegrationTest")]
        public virtual void A985NegativeIntegerAllocationValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A985 Negative integer allocation value", null, new string[] {
                        "ADPIntegrationTest"});
#line 88
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriod",
                        "AllocationValue"});
            table28.AddRow(new string[] {
                        "AY1819",
                        "-15725.00"});
#line 89
 testRunner.Given("an ADP request exists for OrgId \'ORG0017985\' IdentifierName \'?\' Identifier \'?\' Al" +
                    "locationStartDate \'?\' AllocationEndDate \'?\' and FSP \'PSG1819\' as follows", ((string)(null)), table28, "Given ");
#line 93
 testRunner.When("the request is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriod",
                        "AllocationValue"});
            table29.AddRow(new string[] {
                        "AY1819",
                        "-15725.00"});
#line 95
 testRunner.Then("an ADP Allocation Profile response is created for OrgId \'ORG0017985\' IdentifierNa" +
                    "me \'?\' Identifier \'?\' AllocationStartDate \'?\' AllocationEndDate \'?\' and FSP \'PSG" +
                    "1819\' as follows", ((string)(null)), table29, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Period",
                        "Occurrence",
                        "PeriodYear",
                        "PeriodType",
                        "ProfileValue",
                        "DistributionPeriod"});
            table30.AddRow(new string[] {
                        "October",
                        "1",
                        "2018",
                        "CalendarMonth",
                        "-9173.00",
                        "AY1819"});
            table30.AddRow(new string[] {
                        "April",
                        "1",
                        "2019",
                        "CalendarMonth",
                        "-6552.00",
                        "AY1819"});
#line 99
 testRunner.And("an ADP Delivery Profile response is created which contains the following", ((string)(null)), table30, "And ");
#line 105
 testRunner.And("the service returns HTTP status code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A986 Sub-pound allocation value")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "HappyPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ADPIntegrationTest")]
        public virtual void A986Sub_PoundAllocationValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A986 Sub-pound allocation value", null, new string[] {
                        "ADPIntegrationTest"});
#line 108
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriod",
                        "AllocationValue"});
            table31.AddRow(new string[] {
                        "AY1819",
                        "0.75"});
#line 109
 testRunner.Given("an ADP request exists for OrgId \'ORG0017986\' IdentifierName \'?\' Identifier \'?\' Al" +
                    "locationStartDate \'?\' AllocationEndDate \'?\' and FSP \'PSG1819\' as follows", ((string)(null)), table31, "Given ");
#line 113
 testRunner.When("the request is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriod",
                        "AllocationValue"});
            table32.AddRow(new string[] {
                        "AY1819",
                        "0.75"});
#line 115
 testRunner.Then("an ADP Allocation Profile response is created for OrgId \'ORG0017986\' IdentifierNa" +
                    "me \'?\' Identifier \'?\' AllocationStartDate \'?\' AllocationEndDate \'?\' and FSP \'PSG" +
                    "1819\' as follows", ((string)(null)), table32, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Period",
                        "Occurrence",
                        "PeriodYear",
                        "PeriodType",
                        "ProfileValue",
                        "DistributionPeriod"});
            table33.AddRow(new string[] {
                        "October",
                        "1",
                        "2018",
                        "CalendarMonth",
                        "0.00",
                        "AY1819"});
            table33.AddRow(new string[] {
                        "April",
                        "1",
                        "2019",
                        "CalendarMonth",
                        "0.75",
                        "AY1819"});
#line 119
 testRunner.And("an ADP Delivery Profile response is created which contains the following", ((string)(null)), table33, "And ");
#line 125
 testRunner.And("the service returns HTTP status code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A987 Integer allocation value with full-year 2-payment allocation dates and UKPRN" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "HappyPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ADPIntegrationTest")]
        public virtual void A987IntegerAllocationValueWithFull_Year2_PaymentAllocationDatesAndUKPRN()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A987 Integer allocation value with full-year 2-payment allocation dates and UKPRN" +
                    "", null, new string[] {
                        "ADPIntegrationTest"});
#line 128
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriod",
                        "AllocationValue"});
            table34.AddRow(new string[] {
                        "AY1819",
                        "9468.00"});
#line 129
 testRunner.Given("an ADP request exists for OrgId \'ORG0017987\' IdentifierName \'UKPRN\' Identifier \'1" +
                    "0017987\' AllocationStartDate \'01/09/2018\' AllocationEndDate \'31/08/2019\' and FSP" +
                    " \'PSG1819\' as follows", ((string)(null)), table34, "Given ");
#line 133
 testRunner.When("the request is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriod",
                        "AllocationValue"});
            table35.AddRow(new string[] {
                        "AY1819",
                        "9468.00"});
#line 135
 testRunner.Then("an ADP Allocation Profile response is created for OrgId \'ORG0017987\' IdentifierNa" +
                    "me \'UKPRN\' Identifier \'10017987\' AllocationStartDate \'01/09/2018\' AllocationEndD" +
                    "ate \'31/08/2019\' and FSP \'PSG1819\' as follows", ((string)(null)), table35, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Period",
                        "Occurrence",
                        "PeriodYear",
                        "PeriodType",
                        "ProfileValue",
                        "DistributionPeriod"});
            table36.AddRow(new string[] {
                        "October",
                        "1",
                        "2018",
                        "CalendarMonth",
                        "5523.00",
                        "AY1819"});
            table36.AddRow(new string[] {
                        "April",
                        "1",
                        "2019",
                        "CalendarMonth",
                        "3945.00",
                        "AY1819"});
#line 139
 testRunner.And("an ADP Delivery Profile response is created which contains the following", ((string)(null)), table36, "And ");
#line 145
 testRunner.And("the service returns HTTP status code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A988 Integer allocation value with part-year 2-payment allocation dates and round" +
            "ing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "HappyPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ADPIntegrationTest")]
        public virtual void A988IntegerAllocationValueWithPart_Year2_PaymentAllocationDatesAndRounding()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A988 Integer allocation value with part-year 2-payment allocation dates and round" +
                    "ing", null, new string[] {
                        "ADPIntegrationTest"});
#line 148
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriod",
                        "AllocationValue"});
            table37.AddRow(new string[] {
                        "AY1819",
                        "10000.00"});
#line 149
 testRunner.Given("an ADP request exists for OrgId \'ORG0017988\' IdentifierName \'?\' Identifier \'?\' Al" +
                    "locationStartDate \'01/01/2019\' AllocationEndDate \'15/07/2019\' and FSP \'PSG1819\' " +
                    "as follows", ((string)(null)), table37, "Given ");
#line 153
 testRunner.When("the request is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriod",
                        "AllocationValue"});
            table38.AddRow(new string[] {
                        "AY1819",
                        "10000.00"});
#line 155
 testRunner.Then("an ADP Allocation Profile response is created for OrgId \'ORG0017988\' IdentifierNa" +
                    "me \'?\' Identifier \'?\' AllocationStartDate \'01/01/2019\' AllocationEndDate \'15/07/" +
                    "2019\' and FSP \'PSG1819\' as follows", ((string)(null)), table38, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Period",
                        "Occurrence",
                        "PeriodYear",
                        "PeriodType",
                        "ProfileValue",
                        "DistributionPeriod"});
            table39.AddRow(new string[] {
                        "October",
                        "1",
                        "2018",
                        "CalendarMonth",
                        "5833.00",
                        "AY1819"});
            table39.AddRow(new string[] {
                        "April",
                        "1",
                        "2019",
                        "CalendarMonth",
                        "4167.00",
                        "AY1819"});
#line 159
 testRunner.And("an ADP Delivery Profile response is created which contains the following", ((string)(null)), table39, "And ");
#line 165
 testRunner.And("the service returns HTTP status code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A989 Non-integer allocation value with part-year 1-payment allocation dates")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "HappyPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ADPIntegrationTest")]
        public virtual void A989Non_IntegerAllocationValueWithPart_Year1_PaymentAllocationDates()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A989 Non-integer allocation value with part-year 1-payment allocation dates", null, new string[] {
                        "ADPIntegrationTest"});
#line 168
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriod",
                        "AllocationValue"});
            table40.AddRow(new string[] {
                        "AY1819",
                        "16707.20"});
#line 169
 testRunner.Given("an ADP request exists for OrgId \'ORG0017989\' IdentifierName \'?\' Identifier \'?\' Al" +
                    "locationStartDate \'01/05/2019\' AllocationEndDate \'31/08/2019\' and FSP \'PSG1819\' " +
                    "as follows", ((string)(null)), table40, "Given ");
#line 173
 testRunner.When("the request is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriod",
                        "AllocationValue"});
            table41.AddRow(new string[] {
                        "AY1819",
                        "16707.20"});
#line 175
 testRunner.Then("an ADP Allocation Profile response is created for OrgId \'ORG0017989\' IdentifierNa" +
                    "me \'?\' Identifier \'?\' AllocationStartDate \'01/05/2019\' AllocationEndDate \'31/08/" +
                    "2019\' and FSP \'PSG1819\' as follows", ((string)(null)), table41, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "Period",
                        "Occurrence",
                        "PeriodYear",
                        "PeriodType",
                        "ProfileValue",
                        "DistributionPeriod"});
            table42.AddRow(new string[] {
                        "April",
                        "1",
                        "2019",
                        "CalendarMonth",
                        "16707.20",
                        "AY1819"});
#line 179
 testRunner.And("an ADP Delivery Profile response is created which contains the following", ((string)(null)), table42, "And ");
#line 184
 testRunner.And("the service returns HTTP status code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
