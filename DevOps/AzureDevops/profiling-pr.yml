name: $(Rev:r)

pool:
  vmImage: windows-2019

resources:
  repositories:
  - repository: self

trigger: none

variables:
 - name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
   value: '1'
 - name: DOTNET_CLI_TELEMETRY_OPTOUT
   value: '1'
 - name: ApiFrameworkVersion
   value: 'netcoreapp3.1'
 - name: BuildConfiguration
   value: 'Release'
 - group: 'Dotnet Core SDK Version'
 - group: 'Azure Settings Integration-v2'
 - group: 'Smoke Test Info - Integration-v2' 
 - group: 'Smoke Test KV - Integration-v2'


steps:
 - task: UseDotNet@2
   displayName: 'Use .NET Core sdk $(DotnetCoreSdkVersion)'
   inputs:
     version: '$(DotnetCoreSdkVersion)'
     performMultiLevelLookup: true 

 - task: DotNetCoreCLI@2
   displayName: 'dotnet restore'
   inputs:
     command: restore
     projects: |
      **/*.Profiling.*Tests/*.csproj
      CalculateFunding.Profiling.ConsoleConfig/CalculateFunding.Profiling.ConsoleConfig.csproj
      CalculateFunding.Api.Profiling/CalculateFunding.Api.Profiling.csproj
     vstsFeed: 'ecf37bc0-472b-47bf-91e3-6774809fd194'
     noCache: true

 - task: DotNetCoreCLI@2
   displayName: 'dotnet test for APIs'
   inputs:
     command: test
     projects: |
      **/CalculateFunding.Api.Profiling.*Tests/*.csproj
      **/CalculateFunding.Services.Profiling.*Tests/*.csproj
      !**/CalculateFunding.Api.Profiling.IntegrationTests/*.csproj     

     arguments: '--configuration Release /p:AssemblyVersion=$(Build.BuildNumber)'
  
 - task: DotNetCoreCLI@2
   displayName: 'dotnet publish API'
   inputs:
    command: publish
    publishWebProjects: false
    projects: |
     CalculateFunding.Api.Profiling/CalculateFunding.Api.Profiling.csproj     
    arguments: '--configuration Release /p:AssemblyVersion=$(Build.BuildNumber)'
    zipAfterPublish: false
    modifyOutputPath: false
    workingDirectory: CalculateFunding.Api.Profiling

 - task: DotNetCoreCLI@2
   displayName: 'dotnet publish Console App'
   inputs:
     command: publish
     publishWebProjects: false
     projects: |
      CalculateFunding.Profiling.ConsoleConfig/CalculateFunding.Profiling.ConsoleConfig.csproj   
     arguments: '--configuration Release /p:AssemblyVersion=$(Build.BuildNumber)'
     zipAfterPublish: false
     modifyOutputPath: false
     workingDirectory: CalculateFunding.Profiling.ConsoleConfig

 - task: ArchiveFiles@2
   displayName: 'Zip CalculateFunding.Api.Profiling.zip'
   inputs:
    rootFolderOrFile: 'CalculateFunding.Api.Profiling\bin\$(BuildConfiguration)\$(ApiFrameworkVersion)\publish'
    includeRootFolder: false
    archiveFile: '$(Build.ArtifactStagingDirectory)/CalculateFunding.Api.Profiling.zip'

 - task: CopyFiles@2
   displayName: "Copy DevOps Scripts"
   inputs:
    SourceFolder: DevOps
    Contents: |
      *.ps1
      **/*.json
      *.json
    TargetFolder: '$(Build.ArtifactStagingDirectory)/DevOps'  

 - task: AzureCLI@1
   displayName: 'Deploy Profiling Api to Staging Slot'
   inputs:
     azureSubscription: 'dfe-gov-uk ADO to CFS in Azure Test'
     scriptLocation: inlineScript
     inlineScript: 'az webapp deployment source config-zip --resource-group $(ResourceGroup) --name app-$(EnvironmentKey)-profiling-$(productVersion) --src "$(Build.ArtifactStagingDirectory)/CalculateFunding.Api.Profiling.zip" --slot Staging'

 - task: AzureCLI@2
   displayName: 'Restart web app'
   inputs:
    azureSubscription: 'dfe-gov-uk ADO to CFS in Azure Test'
    scriptType: pscore
    scriptLocation: inlineScript
    inlineScript: 'az webapp restart --name app-$(EnvironmentKey)-profiling-$(productVersion) --resource-group $(ResourceGroup)  --slot Staging'
 
 - task: DotNetCoreCLI@2
   condition: and(succeeded(), eq(variables.runIntegrationTests, true))
   displayName: 'dotnet test for Integration tests'
   inputs:
     command: 'test'
     projects: |
       **/*Api.Profiling.IntegrationTests/*.csproj
     arguments: '--configuration Release /p:AssemblyVersion=$(Build.BuildNumber)'
   env:
     AzureAd:Audience: $(AzureAdAudienceprofiling) 
     AzureAd:Authority: $(AzureAdAuthority)
     AzureAd:TenantId: $(AzureAdTenantId)
     AzureConfiguration:ConnectionString: $(AzureConfigurationConnectionString)
     AzureStorageSettings:ConnectionString: $(AzureStorageSettings)
     CosmosDbSettings:ConnectionString: $(CosmosDbSettings)
     CosmosDbSettings:ContainerName: 'profiling'
     CosmosDbSettings:DatabaseName: $(CosmosDbSettingsDatabaseName)
     RedisSettings:CacheConnection: $(RedisSettings)
     ResourceGroup: $(ResourceGroup)
     ServiceBusSettings:ConnectionString: $(ServiceBusSettings)
     storageConfiguration:ConnectionString: $(AzureStorageSettings)
     cfsClient:ApiEndpoint: $(cfsClientApiEndpoint)
     providerProfilingClient:EndPoint: $(providerProfilingClientApiEndpoint)
     ProfilingAzureAdClientID: $(SmokeTestClientId-profiling)
     ProfilingAzureAdClientSecret: $(ProfilingAzureAdClientSecret)

 - task: PowerShell@2
   displayName: 'Run Smoke Test'
   inputs:
    targetType: filePath
    filePath: '$(Build.ArtifactStagingDirectory)/DevOps/run-smoke-test-azure-ad.ps1'
    arguments: '-url "https://app-$(EnvironmentKey)-profiling-$(productVersion)-staging.azurewebsites.net" -tokenServiceUrl "https://login.microsoftonline.com/$(SmokeTestTenantId)/oauth2/v2.0/token" -Scope "$(SmokeTestApplicationUrl-profiling)/.default" -ClientId $(SmokeTestClientId-profiling) -ClientSecret $(ProfilingAzureAdClientSecret) -httpVerb POST'

 - task: PowerShell@2
   displayName: 'Run PowerShell script to check API is secure'
   inputs:
    targetType: filePath
    filePath: '$(Build.ArtifactStagingDirectory)/DevOps/checkApiSecureAzureAd.ps1'
    arguments: '-url "https://app-$(EnvironmentKey)-profiling-$(productVersion)-staging.azurewebsites.net" -tokenServiceUrl "https://login.microsoftonline.com/$(SmokeTestTenantId)/oauth2/v2.0/token" -Scope "$(SmokeTestApplicationUrl-profiling)/.default" -ClientId $(SmokeTestClientId-profiling) -ClientSecret $(ProfilingAzureAdClientSecret) -httpVerb POST'

