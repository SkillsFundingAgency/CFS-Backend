parameters:
- name: DotnetCoreSdkVersion
  type: string
  default: '3.1.101'
- name: ApiFrameworkVersion
  type: string
  default: 'netcoreapp3.1'
- name: ProjectName
  type: string
  default: ''
- name: ServiceName
  type: string
  default: ''
- name: buildconfiguration
  type: string
  default: 'Release'
- name: vstsFeed
  type: string
  default: 'ecf37bc0-472b-47bf-91e3-6774809fd194'
- name: 'ResourceGroup'
  type: 'string'
  default: ''
- name: azureSubscription
  type: 'string'
  default: ''
- name: productVersion
  type: string
  default: 'PR'
- name: EnvironmentKey
  type: string
  default: ''
- name: SmokeTestTenantId
  type: string
  default: ''
- name: SmokeTestApplicationUrl
  type: string
  default: ''
- name: SmokeTestClientID
  type: string
  default: ''
- name: SmokeTestClientSecret
  type: string
  default: ''
- name: APIKey
  type: string
  default: ''
- name: apiBuildNumber
  type: string
  default: ''
- name: BuildApi
  type: boolean
  default: true
- name: BuildFunction
  type: boolean
  default: true
- name: SecureSmokeTest
  type: boolean
  default: false
- name: ServiceBusSettings
  type: string
  default: ''

steps:
 - task: UseDotNet@2
   displayName: 'Use .NET Core sdk ${{ parameters.DotnetCoreSdkVersion }}'
   inputs:
     version: ${{ parameters.DotnetCoreSdkVersion }}

 - task: DotNetCoreCLI@2
   displayName: 'dotnet restore'
   inputs:
     command: restore
     vstsFeed: '${{ parameters.vstsFeed }}'
     projects: |
      **/*.${{ parameters.ProjectName }}.*Tests/*.csproj
      **/*.Models.*UnitTests/*.csproj
      CalculateFunding.Api.${{ parameters.ProjectName }}/CalculateFunding.Api.${{ parameters.ProjectName }}.csproj
      CalculateFunding.Functions.${{ parameters.ProjectName }}/CalculateFunding.Functions.${{ parameters.ProjectName }}.csproj

 - task: DotNetCoreCLI@2
   displayName: 'dotnet test for Service'
   inputs:
     command: test
     arguments: '--configuration ${{ parameters.buildconfiguration }}'
     projects: |
      **/*.Services.${{ parameters.ProjectName }}.*Tests/*.csproj
      **/*.Models.*UnitTests/*.csproj
      **/*.${{ parameters.ProjectName }}*AcceptanceTests/*.csproj
      !**/*.Services.${{ parameters.ProjectName }}.*SmokeTests/*.csproj
      !**/*.Services.${{ parameters.ProjectName }}.IntegrationTests/*.csproj

 - task: DotNetCoreCLI@2
   condition: and(succeeded(), eq( '${{ parameters.BuildApi }}', true))
   displayName: 'dotnet test for API'
   inputs:
     command: test
     arguments: '--configuration ${{ parameters.buildconfiguration }}'
     projects: |
      **/*.Api.${{ parameters.ProjectName }}.*Tests/*.csproj
      !**/*.Api.${{ parameters.ProjectName }}.*SmokeTests/*.csproj
      !**/*.Api.${{ parameters.ProjectName }}.IntegrationTests/*.csproj   

 - task: DotNetCoreCLI@2
   condition: and(succeeded(), eq( '${{ parameters.BuildFunction }}', true))
   displayName: 'dotnet test for functions'
   inputs:
     command: test
     arguments: '--configuration ${{ parameters.buildconfiguration }}'
     projects: |
      **/*.Functions.${{ parameters.ProjectName }}*UnitTests/*.csproj
      !**/*.Api.${{ parameters.ProjectName }}.*SmokeTests/*.csproj
      !**/*.Api.${{ parameters.ProjectName }}.IntegrationTests/*.csproj 

 - task: DotNetCoreCLI@2
   condition: and(succeeded(), eq( '${{ parameters.BuildApi }}', true))
   displayName: 'dotnet publish API'
   inputs:
     command: publish
     publishWebProjects: false
     zipAfterPublish: false
     arguments: '--configuration ${{ parameters.buildconfiguration }} --version-suffix $(Build.BuildId)'
     projects: 'CalculateFunding.Api.${{ parameters.ProjectName }}/CalculateFunding.Api.${{ parameters.ProjectName }}.csproj'

 - task: DotNetCoreCLI@2
   condition: and(succeeded(), eq( '${{ parameters.BuildFunction }}', true))
   displayName: 'dotnet publish Function'
   inputs:
     command: publish
     publishWebProjects: false
     zipAfterPublish: false
     arguments: '--configuration ${{ parameters.buildconfiguration }} --version-suffix $(Build.BuildId)'
     projects: 'CalculateFunding.Functions.${{ parameters.ProjectName }}/CalculateFunding.Functions.${{ parameters.ProjectName }}.csproj'

 - task: PowerShell@2
   condition: and(succeeded(), eq( '${{ parameters.BuildApi }}', true))
   displayName: 'Get File Version Info for API'
   inputs:
     targetType: 'inline'
     script: |
       ($apibuildnumber = (Get-Command $(System.DefaultWorkingDirectory)\CalculateFunding.Api.${{ parameters.ProjectName }}\bin\Release\netcoreapp3.1\CalculateFunding.Api.${{ parameters.ProjectName }}.dll).FileVersionInfo.FileVersion)
       echo "##vso[task.setvariable variable=apibuildnumber]$apibuildnumber"

 - task: PowerShell@2
   condition: and(succeeded(), eq( '${{ parameters.BuildFunction }}', true))
   displayName: 'Get File Version Info for Function'
   inputs:
     targetType: 'inline'
     script: |
       ($functionbuildnumber = (Get-Command $(System.DefaultWorkingDirectory)\CalculateFunding.Functions.${{ parameters.ProjectName }}\bin\Release\netcoreapp3.1\CalculateFunding.Functions.${{ parameters.ProjectName }}.dll).FileVersionInfo.FileVersion)
       echo "##vso[task.setvariable variable=functionbuildnumber]$functionbuildnumber"

 - task: ArchiveFiles@2
   condition: and(succeeded(), eq( '${{ parameters.BuildApi }}', true))
   displayName: 'Zip CalculateFunding.Api.${{ parameters.ProjectName }}.zip'
   inputs:
     rootFolderOrFile: 'CalculateFunding.Api.${{ parameters.ProjectName }}\bin\${{ parameters.BuildConfiguration }}\${{ parameters.ApiFrameworkVersion }}\publish'
     includeRootFolder: false
     archiveFile: '$(Build.ArtifactStagingDirectory)/CalculateFunding.Api.${{ parameters.ProjectName }}.zip'

 - task: ArchiveFiles@2
   condition: and(succeeded(), eq('${{ parameters.BuildFunction }}', true))
   displayName: 'Zip CalculateFunding.Functions.${{ parameters.ProjectName }}.zip'
   inputs:
    rootFolderOrFile: 'CalculateFunding.Functions.${{ parameters.ProjectName }}\bin\${{ parameters.BuildConfiguration }}\${{ parameters.ApiFrameworkVersion }}\publish'
    includeRootFolder: false
    archiveFile: '$(Build.ArtifactStagingDirectory)/CalculateFunding.Functions.${{ parameters.ProjectName }}.zip'
 
 - task: CopyFiles@2
   condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
   displayName: "Copy DevOps Scripts"
   inputs:
    SourceFolder: DevOps
    Contents: |
      *.ps1
      **/*.json
      *.json
    TargetFolder: '$(Build.ArtifactStagingDirectory)/DevOps'

 - task: PublishPipelineArtifact@1
   condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
   displayName: 'Publish Drop Artifact'
   inputs:
    targetPath: $(build.artifactstagingdirectory)
    artifactName: drop

 - powershell: |
    Write-Host "Project: ${{ parameters.ProjectName }}"
    $myPath = "$(Build.Repository.LocalPath)" + '\' + 'CalculateFunding.Functions.' + "${{ parameters.ProjectName }}" + '.SmokeTests'
    Write-Host "Path: $myPath"
    If (Test-Path -LiteralPath $myPath -PathType container) {
      Write-Host "##vso[task.setvariable variable=ExecuteMyTask]True"
      Write-Host "I set ExecuteMyTask to True"
    }
    Else {
      Write-Host "##vso[task.setvariable variable=ExecuteMyTask]False"
      Write-Host "I set ExecuteMyTask to False"
    }
   displayName: 'Check for Policy / Provider Project and Set ExecuteMyTask False if found'   
   condition: and(succeeded(), eq( '${{ parameters.BuildFunction }}', true))

 - task: DotNetCoreCLI@2
   condition: and(succeeded(), eq(variables['ExecuteMyTask'], 'True'))
   displayName: "dotnet publish Function Smoke Test"
   inputs:
     command: publish
     publishWebProjects: false
     zipAfterPublish: false
     arguments: '--configuration ${{ parameters.BuildConfiguration }} --output $(Build.ArtifactStagingDirectory)/CalculateFunding.Functions.${{ parameters.ProjectName }}.SmokeTests'
     projects: 'CalculateFunding.Functions.${{ parameters.ProjectName }}.SmokeTests/CalculateFunding.Functions.${{ parameters.ProjectName }}.SmokeTests.csproj'

 - task: PublishPipelineArtifact@1
   condition: and(succeeded(), eq(variables['ExecuteMyTask'], 'True'), ne(variables['Build.Reason'], 'PullRequest'))
   displayName: 'Publish Smoketest Artifact'
   inputs:
     targetPath: ' $(build.artifactstagingdirectory)/CalculateFunding.Functions.${{ parameters.ProjectName }}.SmokeTests'
     artifactName: Smoketest   

 - task: AzureCLI@1
   condition: and(succeeded(), eq( '${{ parameters.BuildApi }}', true), eq(variables['Build.Reason'], 'PullRequest'))
   displayName: 'Deploy Api to Staging Slot'
   inputs:
     azureSubscription: '${{ parameters.azureSubscription }}'
     scriptLocation: inlineScript
     inlineScript: 'az webapp deployment source config-zip --resource-group ${{ parameters.ResourceGroup }} --name app-${{ parameters.EnvironmentKey }}-${{ parameters.ServiceName }}-pr --src "$(Build.ArtifactStagingDirectory)/CalculateFunding.Api.${{ parameters.ProjectName }}.zip" --slot Staging'

 - task: AzureCLI@2
   condition: and(succeeded(), eq( '${{ parameters.BuildApi }}', true), eq(variables['Build.Reason'], 'PullRequest'))
   displayName: 'Restart web app'
   inputs:
     azureSubscription: '${{ parameters.azureSubscription }}'
     scriptType: pscore
     scriptLocation: inlineScript
     inlineScript: 'az webapp restart --name app-${{ parameters.EnvironmentKey }}-${{ parameters.ServiceName }}-pr --resource-group ${{ parameters.ResourceGroup }}  --slot Staging'
 
 - task: AzureCLI@2
   condition: and(succeeded(), eq( '${{ parameters.BuildApi }}', true), eq(variables['Build.Reason'], 'PullRequest'))
   displayName: 'Prepare Staging slot for swap'
   inputs:
     azureSubscription: '${{ parameters.azureSubscription }}'
     scriptType: pscore
     scriptLocation: inlineScript
     inlineScript: 'az webapp deployment slot swap --action preview --slot Staging --target-slot Production --name app-${{ parameters.EnvironmentKey }}-${{ parameters.ServiceName }}-pr  --resource-group ${{ parameters.ResourceGroup }}'

 - task: PowerShell@2
   condition: and(succeeded(), eq( '${{ parameters.SecureSmokeTest }}', true), eq( '${{ parameters.BuildApi }}', true), eq(variables['Build.Reason'], 'PullRequest'))
   displayName: 'Run AD Azure Smoke Test'
   inputs:
     targetType: filePath
     filePath: '$(System.DefaultWorkingDirectory)/DevOps/run-smoke-test-azure-ad.ps1'
     arguments: '-url "https://app-${{ parameters.EnvironmentKey }}-${{ parameters.ServiceName }}-pr-staging.azurewebsites.net" -tokenServiceUrl "https://login.microsoftonline.com/${{ parameters.SmokeTestTenantId }}/oauth2/v2.0/token" -Scope "${{ parameters.SmokeTestApplicationUrl }}/.default" -ClientId ${{ parameters.SmokeTestClientID }} -ClientSecret ${{ parameters.SmokeTestClientSecret }} -httpVerb POST'

 - task: PowerShell@2
   condition: and(succeeded(), eq( '${{ parameters.SecureSmokeTest }}', true), eq( '${{ parameters.BuildApi }}', true), eq(variables['Build.Reason'], 'PullRequest'))
   displayName: 'Run AD Azure check API is secure'
   inputs:
     targetType: filePath
     filePath: '$(System.DefaultWorkingDirectory)/DevOps/checkApiSecureAzureAd.ps1'
     arguments: '-url "https://app-${{ parameters.EnvironmentKey }}-${{ parameters.ServiceName }}-pr-staging.azurewebsites.net" -tokenServiceUrl "https://login.microsoftonline.com/${{ parameters.SmokeTestTenantId }}/oauth2/v2.0/token" -Scope "${{ parameters.SmokeTestApplicationUrl }}/.default" -ClientId ${{ parameters.SmokeTestClientID }} -ClientSecret ${{ parameters.SmokeTestClientSecret }} -httpVerb POST'

 - task: PowerShell@2
   condition: and(succeeded(), eq( '${{ parameters.SecureSmokeTest }}', false), eq( '${{ parameters.BuildApi }}', true), eq(variables['Build.Reason'], 'PullRequest'))
   displayName: 'Run Smoke Test'
   inputs:
    targetType: filePath
    filePath: '$(System.DefaultWorkingDirectory)/DevOps/run-smoke-test.ps1'
    arguments: '-url "https://app-${{ parameters.EnvironmentKey }}-${{ parameters.ServiceName }}-pr-staging.azurewebsites.net" -apiKey ${{ parameters.apiKey }} -apiBuildNumber $(apibuildnumber)'
    failOnStderr: true
 
 - task: PowerShell@2
   condition: and(succeeded(), eq( '${{ parameters.SecureSmokeTest }}', false), eq( '${{ parameters.BuildApi }}', true), eq(variables['Build.Reason'], 'PullRequest'))
   displayName: 'Run check API is secure'
   inputs:
    targetType: filePath
    filePath: '$(System.DefaultWorkingDirectory)/DevOps/checkApiSecure.ps1'
    arguments: '-url "https://app-${{ parameters.EnvironmentKey }}-${{ parameters.ServiceName }}-pr-staging.azurewebsites.net" -apiKey ${{ parameters.apiKey }}' 

 - task: AzureCLI@1
   condition: and(succeeded(), eq( '${{ parameters.BuildApi }}', true), eq(variables['Build.Reason'], 'PullRequest'))
   displayName: 'Swap Staging to Production Slot Users API'
   inputs:
     azureSubscription: '${{ parameters.azureSubscription }}'
     scriptLocation: inlineScript
     inlineScript: 'az webapp deployment slot swap --action swap --slot Staging --target-slot Production --name app-${{ parameters.EnvironmentKey }}-${{ parameters.ServiceName }}-pr  --resource-group ${{ parameters.ResourceGroup }}'

 - task: AzureCLI@1
   condition: and(succeeded(), eq( '${{ parameters.BuildFunction }}', true), eq(variables['Build.Reason'], 'PullRequest'))
   displayName: 'Deploy Function App'
   inputs:
     azureSubscription: '${{ parameters.azureSubscription }}'
     scriptLocation: inlineScript
     inlineScript: 'az webapp deployment source config-zip --resource-group ${{ parameters.ResourceGroup }} --name fa-${{ parameters.EnvironmentKey }}-${{ parameters.ServiceName }}-pr --src "$(Build.ArtifactStagingDirectory)\CalculateFunding.Functions.${{ parameters.ProjectName }}.zip"' 
 
 - task: AzureCLI@2
   condition: and(succeeded(), eq( '${{ parameters.BuildFunction }}', true), eq(variables['Build.Reason'], 'PullRequest'))
   displayName: 'Restart function app'
   inputs:
    azureSubscription: '${{ parameters.azureSubscription }}'
    scriptType: pscore
    scriptLocation: inlineScript
    inlineScript: 'az webapp restart --name fa-${{ parameters.EnvironmentKey }}-${{ parameters.ServiceName }}-pr --resource-group ${{ parameters.ResourceGroup }}'

 - powershell: |
    Write-Host "Creating local.settings.json file"
    $myhash = @{
        ServiceBusSettings = @{
            ConnectionString = "${{ parameters.ServiceBusSettings }}"
           }
        }
    $myPath = "$(Build.ArtifactStagingDirectory)\CalculateFunding.Functions.${{ parameters.ProjectName }}.SmokeTests\local.settings.json"
    $myhash | ConvertTo-Json | out-file $myPath
    If (test-path -Path $myPath -PathType leaf){
      write-host "File created ok"
      }
    Else {
      Write-Host "File was not created"
     }
   displayName: 'Create Local.settings.json file'
   condition: and(succeeded(), eq( '${{ parameters.BuildFunction }}', true), eq(variables['Build.Reason'], 'PullRequest'))

 - powershell: |
    # Write your PowerShell commands here.
    Write-Host "Starting VSTest"
    Get-Content $(Build.ArtifactStagingDirectory)\CalculateFunding.Functions.${{ parameters.ProjectName }}.SmokeTests\local.settings.json
    If (test-path -Path "$(Build.ArtifactStagingDirectory)\CalculateFunding.Functions.${{ parameters.ProjectName }}.SmokeTests\CalculateFunding.Functions.${{ parameters.ProjectName }}.SmokeTests\CalculateFunding.Functions.${{ parameters.ProjectName }}.SmokeTests.dll" -PathType leaf)
     {
       Write-Host "ready to test"
       dotnet vstest "$(Build.ArtifactStagingDirectory)\CalculateFunding.Functions.${{ parameters.ProjectName }}.SmokeTests\CalculateFunding.Functions.${{ parameters.ProjectName }}.SmokeTests\CalculateFunding.Functions.${{ parameters.ProjectName }}.SmokeTests.dll"
     }
    Else
     {
       Write-Host "I couldn't find the file to test - sorry"
     }
   displayName: 'Run Function App Smoketest'
   condition: and(succeeded(), eq( '${{ parameters.BuildFunction }}', true), eq(variables['Build.Reason'], 'PullRequest'))

 - task: AzureCLI@2
   condition: and(failed(), eq( '${{ parameters.BuildApi }}', true), eq(variables['Build.Reason'], 'PullRequest'))
   displayName: 'Reset in-progress swap on failure'
   inputs:
     azureSubscription: '${{ parameters.azureSubscription }}'
     scriptType: pscore
     scriptLocation: inlineScript
     inlineScript: 'az webapp deployment slot swap --action reset --slot Staging --name app-${{ parameters.EnvironmentKey }}-${{ parameters.ServiceName }}-pr --resource-group ${{ parameters.ResourceGroup }}'