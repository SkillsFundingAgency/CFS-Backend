parameters:
- name: DotnetCoreSdkVersion
  type: string
  default: '3.1.101'
- name: ApiFrameworkVersion
  type: string
  default: 'netcoreapp3.1'
- name: ProjectName
  type: string
  default: ''
- name: ServiceName
  type: string
  default: ''
- name: buildconfiguration
  type: string
  default: 'Release'
- name: vstsFeed
  type: string
  default: 'ecf37bc0-472b-47bf-91e3-6774809fd194'
- name: 'ResourceGroup'
  type: 'string'
  default: ''
- name: productVersion
  type: string
  default: 'v2'
- name: EnvironmentKey
  type: string
  default: 't1in'
- name: SmokeTestTenantId
  type: string
  default: ''
- name: SmokeTestApplicationUrl
  type: string
  default: ''
- name: SmokeTestClientID
  type: string
  default: ''
- name: SmokeTestClientSecret
  type: string
  default: ''
- name: APIKey
  type: string
  default: ''
- name: BuildApi
  type: boolean
  default: true
- name: BuildFunction
  type: boolean
  default: true
- name: SecureSmokeTest
  type: boolean
  default: false

steps:
 - task: UseDotNet@2
   displayName: 'Use .NET Core sdk ${{ parameters.DotnetCoreSdkVersion }}'
   inputs:
     version: ${{ parameters.DotnetCoreSdkVersion }}

 - task: DotNetCoreCLI@2
   displayName: 'dotnet restore'
   inputs:
     command: restore
     vstsFeed: '${{ parameters.vstsFeed }}'
     projects: |
      **/*.${{ parameters.ProjectName }}.*Tests/*.csproj
      **/*.Models.*UnitTests/*.csproj
      CalculateFunding.Api.${{ parameters.ProjectName }}/CalculateFunding.Api.${{ parameters.ProjectName }}.csproj
      CalculateFunding.Functions.${{ parameters.ProjectName }}/CalculateFunding.Functions.${{ parameters.ProjectName }}.csproj

 - task: DotNetCoreCLI@2
   displayName: 'dotnet test for Service'
   inputs:
     command: test
     arguments: '--configuration ${{ parameters.buildconfiguration }}'
     projects: |
      **/*.Services.${{ parameters.ProjectName }}.*Tests/*.csproj
      **/*.Models.*UnitTests/*.csproj
      **/*.${{ parameters.ProjectName }}*AcceptanceTests/*.csproj
      !**/*.Services.${{ parameters.ProjectName }}.*SmokeTests/*.csproj
      !**/*.Services.${{ parameters.ProjectName }}.IntegrationTests/*.csproj

 - task: DotNetCoreCLI@2
   condition: and(succeeded(), eq( '${{ parameters.BuildApi }}', true))
   displayName: 'dotnet test for API'
   inputs:
     command: test
     arguments: '--configuration ${{ parameters.buildconfiguration }}'
     projects: |
      **/*.Api.${{ parameters.ProjectName }}.*Tests/*.csproj
      !**/*.Api.${{ parameters.ProjectName }}.*SmokeTests/*.csproj
      !**/*.Api.${{ parameters.ProjectName }}.IntegrationTests/*.csproj   

 - task: DotNetCoreCLI@2
   condition: and(succeeded(), eq( '${{ parameters.BuildFunction }}', true))
   displayName: 'dotnet test for functions'
   inputs:
     command: test
     arguments: '--configuration ${{ parameters.buildconfiguration }}'
     projects: |
      **/*.Functions.${{ parameters.ProjectName }}*UnitTests/*.csproj
      !**/*.Api.${{ parameters.ProjectName }}.*SmokeTests/*.csproj
      !**/*.Api.${{ parameters.ProjectName }}.IntegrationTests/*.csproj 

 - task: DotNetCoreCLI@2
   condition: and(succeeded(), eq( '${{ parameters.BuildApi }}', true))
   displayName: 'dotnet publish API'
   inputs:
     command: publish
     publishWebProjects: false
     zipAfterPublish: false
     arguments: '--configuration ${{ parameters.buildconfiguration }}'
     projects: 'CalculateFunding.Api.${{ parameters.ProjectName }}/CalculateFunding.Api.${{ parameters.ProjectName }}.csproj'

 - task: DotNetCoreCLI@2
   condition: and(succeeded(), eq( '${{ parameters.BuildFunction }}', true))
   displayName: 'dotnet publish Function'
   inputs:
     command: publish
     publishWebProjects: false
     zipAfterPublish: false
     arguments: '--configuration ${{ parameters.buildconfiguration }}'
     projects: 'CalculateFunding.Functions.${{ parameters.ProjectName }}/CalculateFunding.Functions.${{ parameters.ProjectName }}.csproj'

 - task: ArchiveFiles@2
   condition: and(succeeded(), eq( '${{ parameters.BuildApi }}', true))
   displayName: 'Zip CalculateFunding.Api.${{ parameters.ProjectName }}.zip'
   inputs:
    rootFolderOrFile: 'CalculateFunding.Api.${{ parameters.ProjectName }}\bin\${{ parameters.BuildConfiguration }}\${{ parameters.ApiFrameworkVersion }}\publish'
    includeRootFolder: false
    archiveFile: '$(Build.ArtifactStagingDirectory)/CalculateFunding.Api.${{ parameters.ProjectName }}.zip'

 - task: AzureCLI@1
   condition: and(succeeded(), eq( '${{ parameters.BuildApi }}', true), eq(variables['Build.Reason'], 'PullRequest'))
   displayName: 'Deploy Api to Staging Slot'
   inputs:
     azureSubscription: 'dfe-gov-uk ADO to CFS in Azure Test'
     scriptLocation: inlineScript
     inlineScript: 'az webapp deployment source config-zip --resource-group ${{ parameters.ResourceGroup }} --name app-${{ parameters.EnvironmentKey }}-${{ parameters.ServiceName }}-${{ parameters.productVersion }} --src "$(Build.ArtifactStagingDirectory)/CalculateFunding.Api.${{ parameters.ProjectName }}.zip" --slot Staging'

 - task: AzureCLI@2
   condition: and(succeeded(), eq( '${{ parameters.BuildApi }}', true), eq(variables['Build.Reason'], 'PullRequest'))
   displayName: 'Restart web app'
   inputs:
    azureSubscription: 'dfe-gov-uk ADO to CFS in Azure Test'
    scriptType: pscore
    scriptLocation: inlineScript
    inlineScript: 'az webapp restart --name app-${{ parameters.EnvironmentKey }}-${{ parameters.ServiceName }}-${{ parameters.productVersion }} --resource-group ${{ parameters.ResourceGroup }}  --slot Staging'

 - task: PowerShell@2
   condition: and(succeeded(), eq( '${{ parameters.SecureSmokeTest }}', true), eq( '${{ parameters.BuildApi }}', true), eq(variables['Build.Reason'], 'PullRequest'))
   displayName: 'Run AD Azure Smoke Test'
   inputs:
    targetType: filePath
    filePath: '$(System.DefaultWorkingDirectory)/DevOps/run-smoke-test-azure-ad.ps1'
    arguments: '-url "https://app-${{ parameters.EnvironmentKey }}-${{ parameters.ServiceName }}-${{ parameters.productVersion }}-staging.azurewebsites.net" -tokenServiceUrl "https://login.microsoftonline.com/${{ parameters.SmokeTestTenantId }}/oauth2/v2.0/token" -Scope "${{ parameters.SmokeTestApplicationUrl }}/.default" -ClientId ${{ parameters.SmokeTestClientID }} -ClientSecret ${{ parameters.SmokeTestClientSecret }} -httpVerb POST'

 - task: PowerShell@2
   condition: and(succeeded(), eq( '${{ parameters.SecureSmokeTest }}', true), eq( '${{ parameters.BuildApi }}', true), eq(variables['Build.Reason'], 'PullRequest'))
   displayName: 'Run AD Azure check API is secure'
   inputs:
    targetType: filePath
    filePath: '$(System.DefaultWorkingDirectory)/DevOps/checkApiSecureAzureAd.ps1'
    arguments: '-url "https://app-${{ parameters.EnvironmentKey }}-${{ parameters.ServiceName }}-${{ parameters.productVersion }}-staging.azurewebsites.net" -tokenServiceUrl "https://login.microsoftonline.com/${{ parameters.SmokeTestTenantId }}/oauth2/v2.0/token" -Scope "${{ parameters.SmokeTestApplicationUrl }}/.default" -ClientId ${{ parameters.SmokeTestClientID }} -ClientSecret ${{ parameters.SmokeTestClientSecret }} -httpVerb POST'

 - task: PowerShell@2
   condition: and(succeeded(), eq( '${{ parameters.SecureSmokeTest }}', false), eq( '${{ parameters.BuildApi }}', true), eq(variables['Build.Reason'], 'PullRequest'))
   displayName: 'Run Smoke Test'
   inputs:
    targetType: filePath
    filePath: '$(System.DefaultWorkingDirectory)/DevOps/run-smoke-test.ps1'
    arguments: '-url "https://app-${{ parameters.EnvironmentKey }}-${{ parameters.ServiceName }}-${{ parameters.productVersion }}-staging.azurewebsites.net" -apiKey ${{ parameters.apiKey }}'
    failOnStderr: true
 
 - task: PowerShell@2
   condition: and(succeeded(), eq( '${{ parameters.SecureSmokeTest }}', false), eq( '${{ parameters.BuildApi }}', true), eq(variables['Build.Reason'], 'PullRequest'))
   displayName: 'Run check API is secure'
   inputs:
    targetType: filePath
    filePath: '$(System.DefaultWorkingDirectory)/DevOps/checkApiSecure.ps1'
    arguments: '-url "https://app-${{ parameters.EnvironmentKey }}-${{ parameters.ServiceName }}-${{ parameters.productVersion }}-staging.azurewebsites.net" -apiKey ${{ parameters.apiKey }}' 

 - task: ArchiveFiles@2
   condition: and(succeeded(), eq('${{ parameters.BuildFunction }}', true), ne(variables['Build.Reason'], 'PullRequest'))
   displayName: 'Zip CalculateFunding.Functions.${{ parameters.ProjectName }}.zip'
   inputs:
    rootFolderOrFile: 'CalculateFunding.Functions.${{ parameters.ProjectName }}\bin\${{ parameters.BuildConfiguration }}\${{ parameters.ApiFrameworkVersion }}\publish'
    includeRootFolder: false
    archiveFile: '$(Build.ArtifactStagingDirectory)/CalculateFunding.Functions.${{ parameters.ProjectName }}.zip'

 - task: CopyFiles@2
   condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
   displayName: "Copy DevOps Scripts"
   inputs:
    SourceFolder: DevOps
    Contents: |
      *.ps1
      **/*.json
      *.json
    TargetFolder: '$(Build.ArtifactStagingDirectory)/DevOps'

 - task: PublishPipelineArtifact@1
   condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
   displayName: 'Publish Drop Artifact'
   inputs:
    targetPath: $(build.artifactstagingdirectory)
    artifactName: drop

 - powershell: |
    dir
    Write-Host "Project: ${{ parameters.ProjectName }}"
    $myPath = "$(Build.Repository.LocalPath)" + '\' + 'CalculateFunding.Functions.' + "${{ parameters.ProjectName }}" + '.SmokeTests'
    Write-Host "Path: $myPath"
    If (Test-Path -LiteralPath $myPath -PathType container) {
      Write-Host "##vso[task.setvariable variable=ExecuteMyTask]True"
      Write-Host "I set ExecuteMyTask to True"
    }
    Else {
      Write-Host "##vso[task.setvariable variable=ExecuteMyTask]False"
      Write-Host "I set ExecuteMyTask to False"
    }
   displayName: 'Check for Policy / Provider Project and Set ExecuteMyTask False if found'
   condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

 - task: DotNetCoreCLI@2
   condition: and(succeeded(), eq(variables['ExecuteMyTask'], 'True'), ne(variables['Build.Reason'], 'PullRequest'))
   displayName: "dotnet publish Function Smoke Test"
   inputs:
     command: publish
     publishWebProjects: false
     zipAfterPublish: false
     arguments: '--configuration ${{ parameters.BuildConfiguration }} --output $(Build.ArtifactStagingDirectory)/CalculateFunding.Functions.${{ parameters.ProjectName }}.SmokeTests'
     projects: 'CalculateFunding.Functions.${{ parameters.ProjectName }}.SmokeTests/CalculateFunding.Functions.${{ parameters.ProjectName }}.SmokeTests.csproj'

 - task: PublishPipelineArtifact@1
   condition: and(succeeded(), eq(variables['ExecuteMyTask'], 'True'), ne(variables['Build.Reason'], 'PullRequest'))
   displayName: 'Publish Smoketest Artifact'
   inputs:
    targetPath: ' $(build.artifactstagingdirectory)/CalculateFunding.Functions.${{ parameters.ProjectName }}.SmokeTests'
    artifactName: Smoketest    