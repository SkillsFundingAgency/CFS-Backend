name: $(Rev:r)

pool:
  vmImage: windows-2022

trigger:
  branches:
    include:
    - providers
    - fdps
  paths:
    include:
    - CalculateFunding.Api.Providers
    - CalculateFunding.Functions.Providers
    - CalculateFunding.Services.Providers
    - CalculateFunding.Services.Providers.UnitTests
    - CalculateFunding.Services.Core
    - DevOps/search-indexes/providersindex
    - DevOps/search-indexers/providersindexer
    - CalculateFunding.Models.Providers
    - DevOps/provider-storage
    - DevOps/search-datasources/providersdatasource
    - CalculateFunding.Models.ProviderLegacy

variables:
 - name: ProjectName
   value: 'providers'
 - name: ServiceName
   value: 'providers'
 - name: releaseconfiguration
   value: 'release'
 - name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
   value: true
 - name: DOTNET_CLI_TELEMETRY_OPTOUT 
   value: true
 - name: BuildApi
   value: true
 - name: BuildFunction
   value: true
 - name: SecureSmokeTest
   value: false
 - group: 'Dotnet Core SDK Version'
 - group: 'Azure Settings Integration-v2'
 - group: 'Integration Tests Info - Integration-PR' 
 - group: 'Integration Tests KV - Integration-PR'
 - group: 'Shared Infrastructure - Integration - v2'
 - group: 'Resource Tags test-v2 integration-v2'
 - group: 'Feature Toggles Integration-v2'
 - group: 'SPI Dev'

steps:
 - ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
   - template: templates\standard-service-arm-deploy.yml
     parameters:
       ServiceName: ${{ variables.ServiceName }}
       ResourceGroup: $(ResourceGroup)
       azureSubscription: $(azureSubscription)
       overrideParameters: '-environmentKey "$(EnvironmentKey)" -productVersion "pr" -appServiceLogRetentionDays "0" -sendWebLogsToStorage "false" -enableExceptionMessages "false" -FUNCTIONS_EXTENSION_VERSION "$(FUNCTIONS_EXTENSION_VERSION_Net6)" -apiHostingPlanName "$(apiHostingPlanNamePR)" -functionHostingPlanName "$(functionHostingPlanNamePR)" -keyVaultName "$(keyVaultNamePR)" -environmentTag "$(environmentTag)" -parentBusinessTag "$(parentBusinessTag)" -portfolioTag "$(portfolioTag)" -productTag "$(productTag)" -serviceLineTag "$(serviceLineTag)" -applicationInsightsName "$(applicationInsightsName)" -sharedLogStorageName "$(sharedLogStorageName)" -searchName $(searchName) -Http5xxTH "100" -Http401TH "100" -HttpResponseTimeTH "100" -azureAdTenantId "$(azureAdTenantId)" -azureAdAudienceExternal "$(azureAdAudienceExternal)" -spiClientApiEndpoint "$(spiClientApiEndpoint)" -spiAzureBearerTokenOptionsUrl "$(spiAzureBearerTokenOptionsUrl)" -spiAzureBearerTokenOptionsGrantType "$(spiAzureBearerTokenOptionsGrantType)" -spiAzureBearerTokenOptionsScope "$(spiAzureBearerTokenOptionsScope)" -spiAzureBearerTokenOptionsClientId "$(spiAzureBearerTokenOptionsClientId)" -logAnalyticsWorkspaceName "$(logAnalyticsWorkspaceName)" -dfeT1VNetResourceGroupName "$(dfeT1VNetResourceGroupName)" -dfeT1VirtualNetworkName "$(dfeT1VirtualNetworkName)" -appSrvSubnetName "$(appSrvSubnetNamePR)" -intProvidersAStoVNet "true" -funcsSubnetName "$(funcsSubnetNamePR)" -intProvidersFAtoVNet "true" -calcEngineFASubnetName "$(calcEngineFASubnetNamePR)" -ipSecurityRestrictionsEnabled "false"'

 - template: templates\standard-service-pr-ci-build-prinfra.yml
   parameters:
     ProjectName: ${{ variables.ProjectName }}
     ServiceName: ${{ variables.ServiceName }} 
     DotnetCoreSdkVersion: $(DotnetCoreSdkVersionNet6)
     ApiFrameworkVersion: 'net6'
     ResourceGroup: $(ResourceGroup)
     azureSubscription: '$(azureSubscription)'
     environmentKey: $(EnvironmentKey)
     ServiceBusSettings: $(ServiceBusSettingsPR)
     BuildApi: ${{ variables.BuildApi }}
     BuildFunction: ${{ variables.BuildFunction }}
     SecureSmokeTest: ${{ variables.SecureSmokeTest }}
     APIKey: $(svcapiproviders)

 - task: DotNetCoreCLI@2
   condition: and(succeeded(), eq(variables['Build.Reason'],Â 'PullRequest'), eq(variables.runIntegrationTests, true))
   displayName: 'dotnet test for Integration tests'
   inputs:
     command: 'test'
     projects: |
      **/*Api.${{ variables.ProjectName }}.IntegrationTests/*.csproj
     arguments: '--configuration Release /p:AssemblyVersion=$(Build.BuildNumber)'
   env:
     AzureAd:Audience: $(AzureAdAudienceExternal) 
     AzureAd:Authority: $(AzureAdAuthority)
     AzureAd:TenantId: $(AzureAdTenantId)
     AzureConfiguration:ConnectionString: $(AzureConfigurationConnectionString)
     AzureStorageSettings:ConnectionString: $(AzureStorageSettings)
     CommonStorageSettings:ConnectionString: $(AzureStorageSettings)
     CosmosDbSettings:ConnectionString: $(CosmosDbSettings)
     CosmosDbSettings:DatabaseName: $(CosmosDbSettingsDatabaseName)
     RedisSettings:CacheConnection: $(RedisSettings)
     ResourceGroup: $(ResourceGroup)
     SearchServiceKey: $(SearchServiceKey)
     SearchServiceName: $(SearchServiceName)
     ServiceBusSettings:ConnectionString: $(ServiceBusSettingsPR)
     storageConfiguration:ConnectionString: $(AzureStorageSettings)
     WEBSITE_HTTPLOGGING_CONTAINER_URL: $(WEBSITE_HTTPLOGGING_CONTAINER_URL)
     apiKeyMiddleware:apiKey: $(svcapiproviders)
     cfsClient:ApiEndpoint: $(cfsClientApiEndpoint)
     jobsClient:ApiEndpoint: $(jobsClientApiEndpoint)
     jobsClient:ApiKey: $(svcapijobs)
     policiesClient:ApiEndpoint: $(policiesClientApiEndpoint)
     policiesClient:ApiKey: $(svcapipolicy)
     providersClient:ApiEndpoint: $(providersClientApiEndpoint)
     providersClient:ApiKey: $(svcapiproviders)
     resultsClient:ApiEndpoint: $(resultsClientApiEndpoint)
     resultsClient:ApiKey: $(svcapiresults)
     specificationsClient:ApiEndpoint: $(specificationsClientApiEndpoint)
     specificationsClient:ApiKey: $(svcapispecs)
     spiAzureBearerTokenOptions:ClientId: $(spiAzureBearerTokenOptionsClientId)
     spiAzureBearerTokenOptions:ClientSecret: $(spiAzureBearerTokenOptionsClientSecret)
     spiAzureBearerTokenOptions:GrantType: 'client_credentials'
     spiAzureBearerTokenOptions:Scope: $(spiAzureBearerTokenOptionsScope)
     spiAzureBearerTokenOptions:Url: $(spiAzureBearerTokenOptionsUrl)
     spiClient:ApiEndpoint: $(spiClientApiEndpoint) 
     spiClient:ApiKey: $(spiClientApiKey)
     
 - task: AzureCLI@2
   condition: and(failed(), eq(variables['Build.Reason'], 'PullRequest'))
   displayName: 'Reset in-progress swap on failure'
   inputs:
     azureSubscription: $(azureSubscription)
     scriptType: pscore
     scriptLocation: inlineScript
     inlineScript: 'az webapp deployment slot swap --action reset --slot Staging --name app-$(EnvironmentKey)-${{ variables.ServiceName }}-pr --resource-group $(ResourceGroup)'