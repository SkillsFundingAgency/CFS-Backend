// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CalculateFunding.Publishing.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class RefreshDsgVariationsWithSecondOccurrenceFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "RefreshDsgVariationsWithSecondOccurrence.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "RefreshDsgVariationsWithSecondOccurrence", "\tIn order to refresh funding for DSG\r\n\tAs a funding approver\r\n\tI want to refresh " +
                    "funding for all approved providers within a specification\r\n\tAnd for variations w" +
                    "ith the allocations to be taken into account ", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "RefreshDsgVariationsWithSecondOccurrence")))
            {
                global::CalculateFunding.Publishing.AcceptanceTests.Features.RefreshDsgVariationsWithSecondOccurrenceFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
            TechTalk.SpecFlow.Table table931 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table931.AddRow(new string[] {
                        "DefaultTemplateVersion",
                        "1.0"});
#line 8
 testRunner.Given("a funding configuration exists for funding stream \'DSG\' in funding period \'FY-202" +
                    "1\'", ((string)(null)), table931, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table932 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table932.AddRow(new string[] {
                        "GroupTypeIdentifier",
                        "UKPRN"});
            table932.AddRow(new string[] {
                        "GroupingReason",
                        "Payment"});
            table932.AddRow(new string[] {
                        "GroupTypeClassification",
                        "LegalEntity"});
            table932.AddRow(new string[] {
                        "OrganisationGroupTypeCode",
                        "LocalAuthority"});
#line 11
 testRunner.And("the funding configuration has the following organisation group", ((string)(null)), table932, "And ");
#line hidden
#line 17
 testRunner.And("the funding configuration is available in the policies repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table933 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table933.AddRow(new string[] {
                        "GroupTypeIdentifier",
                        "LACode"});
            table933.AddRow(new string[] {
                        "GroupingReason",
                        "Information"});
            table933.AddRow(new string[] {
                        "GroupTypeClassification",
                        "GeographicalBoundary"});
            table933.AddRow(new string[] {
                        "OrganisationGroupTypeCode",
                        "LocalAuthority"});
#line 18
 testRunner.And("the funding configuration has the following organisation group", ((string)(null)), table933, "And ");
#line hidden
#line 24
 testRunner.And("the funding configuration is available in the policies repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table934 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table934.AddRow(new string[] {
                        "GroupTypeIdentifier",
                        "LocalAuthorityClassificationTypeCode"});
            table934.AddRow(new string[] {
                        "GroupingReason",
                        "Information"});
            table934.AddRow(new string[] {
                        "GroupTypeClassification",
                        "GeographicalBoundary"});
            table934.AddRow(new string[] {
                        "OrganisationGroupTypeCode",
                        "LocalGovernmentGroup"});
#line 25
 testRunner.And("the funding configuration has the following organisation group", ((string)(null)), table934, "And ");
#line hidden
#line 31
 testRunner.And("the funding configuration is available in the policies repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table935 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table935.AddRow(new string[] {
                        "GroupTypeIdentifier",
                        "GovernmentOfficeRegionCode"});
            table935.AddRow(new string[] {
                        "GroupingReason",
                        "Information"});
            table935.AddRow(new string[] {
                        "GroupTypeClassification",
                        "GeographicalBoundary"});
            table935.AddRow(new string[] {
                        "OrganisationGroupTypeCode",
                        "GovernmentOfficeRegion"});
#line 32
 testRunner.And("the funding configuration has the following organisation group", ((string)(null)), table935, "And ");
#line hidden
#line 38
 testRunner.And("the funding configuration is available in the policies repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table936 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table936.AddRow(new string[] {
                        "GroupTypeIdentifier",
                        "CountryCode"});
            table936.AddRow(new string[] {
                        "GroupingReason",
                        "Information"});
            table936.AddRow(new string[] {
                        "GroupTypeClassification",
                        "GeographicalBoundary"});
            table936.AddRow(new string[] {
                        "OrganisationGroupTypeCode",
                        "Country"});
#line 39
 testRunner.And("the funding configuration has the following organisation group", ((string)(null)), table936, "And ");
#line hidden
#line 45
 testRunner.And("the funding configuration is available in the policies repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table937 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table937.AddRow(new string[] {
                        "Id",
                        "FY-2021"});
            table937.AddRow(new string[] {
                        "Name",
                        "Financial Year 2020-21"});
            table937.AddRow(new string[] {
                        "StartDate",
                        "2019-08-01 00:00:00"});
            table937.AddRow(new string[] {
                        "EndDate",
                        "2020-07-31 00:00:00"});
            table937.AddRow(new string[] {
                        "Period",
                        "2021"});
            table937.AddRow(new string[] {
                        "Type",
                        "FY"});
#line 46
 testRunner.And("the funding period exists in the policies service", ((string)(null)), table937, "And ");
#line hidden
            TechTalk.SpecFlow.Table table938 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table938.AddRow(new string[] {
                        "Id",
                        "specForPublishing"});
            table938.AddRow(new string[] {
                        "Name",
                        "Test Specification for Publishing"});
            table938.AddRow(new string[] {
                        "IsSelectedForFunding",
                        "true"});
            table938.AddRow(new string[] {
                        "ProviderVersionId",
                        "dsg-providers-2.0"});
#line 54
 testRunner.And("the following specification exists", ((string)(null)), table938, "And ");
#line hidden
#line 60
 testRunner.And("the specification has the funding period with id \'FY-2021\' and name \'Financial Ye" +
                    "ar 2020-21\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table939 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Id"});
            table939.AddRow(new string[] {
                        "DSG",
                        "DSG"});
#line 61
 testRunner.And("the specification has the following funding streams", ((string)(null)), table939, "And ");
#line hidden
            TechTalk.SpecFlow.Table table940 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table940.AddRow(new string[] {
                        "DSG",
                        "1.0.Variations"});
#line 64
 testRunner.And("the specification has the following template versions for funding streams", ((string)(null)), table940, "And ");
#line hidden
#line 67
 testRunner.And("the specification is approved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table941 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table941.AddRow(new string[] {
                        "StatusChangedDate",
                        "2019-09-27 00:00:00"});
            table941.AddRow(new string[] {
                        "ExternalPublicationDate",
                        "2019-09-28 00:00:00"});
            table941.AddRow(new string[] {
                        "EarliestPaymentAvailableDate",
                        "2019-09-29 00:00:00"});
#line 68
 testRunner.And("the publishing dates for the specifcation are set as following", ((string)(null)), table941, "And ");
#line hidden
            TechTalk.SpecFlow.Table table942 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table942.AddRow(new string[] {
                        "JobDefinitionId",
                        "PublishFundingJob"});
            table942.AddRow(new string[] {
                        "InvokerUserId",
                        "PublishUserId"});
            table942.AddRow(new string[] {
                        "InvokerUserDisplayName",
                        "Invoker User"});
            table942.AddRow(new string[] {
                        "ParentJobId",
                        ""});
#line 73
 testRunner.And("the following job is requested to be queued for the current specification", ((string)(null)), table942, "And ");
#line hidden
#line 79
 testRunner.And("the job is submitted to the job service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table943 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table943.AddRow(new string[] {
                        "ProviderVersionId",
                        "dsg-providers-2.0"});
            table943.AddRow(new string[] {
                        "VersionType",
                        "Custom"});
            table943.AddRow(new string[] {
                        "Name",
                        "DSG Provider Version"});
            table943.AddRow(new string[] {
                        "Description",
                        "Acceptance Tests"});
            table943.AddRow(new string[] {
                        "Version",
                        "2"});
            table943.AddRow(new string[] {
                        "TargetDate",
                        "2019-12-12 00:00"});
            table943.AddRow(new string[] {
                        "FundingStream",
                        "DSG"});
            table943.AddRow(new string[] {
                        "Created",
                        "2019-12-11 00:00"});
#line 80
 testRunner.And("the following provider version exists in the providers service", ((string)(null)), table943, "And ");
#line hidden
            TechTalk.SpecFlow.Table table944 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table944.AddRow(new string[] {
                        "ProviderId",
                        "1000000"});
            table944.AddRow(new string[] {
                        "FundingStreamId",
                        "DSG"});
            table944.AddRow(new string[] {
                        "FundingPeriodId",
                        "FY-2021"});
            table944.AddRow(new string[] {
                        "TemplateVersion",
                        "1.0"});
            table944.AddRow(new string[] {
                        "Status",
                        "Released"});
            table944.AddRow(new string[] {
                        "TotalFunding",
                        "14000"});
            table944.AddRow(new string[] {
                        "MajorVersion",
                        "0"});
            table944.AddRow(new string[] {
                        "MinorVersion",
                        "1"});
#line 90
 testRunner.And("the following Published Provider has been previously generated for the current sp" +
                    "ecification", ((string)(null)), table944, "And ");
#line hidden
            TechTalk.SpecFlow.Table table945 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "FundingLineCode",
                        "Value",
                        "TemplateLineId",
                        "Type"});
            table945.AddRow(new string[] {
                        "Total DSG after deductions and recoupment",
                        "DSG-002",
                        "14000",
                        "3",
                        "Payment"});
#line 100
 testRunner.And("the Published Provider has the following funding lines", ((string)(null)), table945, "And ");
#line hidden
            TechTalk.SpecFlow.Table table946 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriodId",
                        "Value"});
            table946.AddRow(new string[] {
                        "FY-2021",
                        "14000"});
#line 103
 testRunner.And("the Published Provider has the following distribution period for funding line \'DS" +
                    "G-002\'", ((string)(null)), table946, "And ");
#line hidden
            TechTalk.SpecFlow.Table table947 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriodId",
                        "Type",
                        "TypeValue",
                        "Year",
                        "Occurrence",
                        "ProfiledValue"});
            table947.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "April",
                        "2021",
                        "1",
                        "2000"});
            table947.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "April",
                        "2021",
                        "2",
                        "2000"});
            table947.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "May",
                        "2021",
                        "1",
                        "2000"});
            table947.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "May",
                        "2021",
                        "2",
                        "2000"});
            table947.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "June",
                        "2021",
                        "1",
                        "2000"});
            table947.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "June",
                        "2021",
                        "2",
                        "2000"});
            table947.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "July",
                        "2021",
                        "1",
                        "2000"});
            table947.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "July",
                        "2021",
                        "2",
                        "2000"});
            table947.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "August",
                        "2021",
                        "1",
                        "2000"});
            table947.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "August",
                        "2021",
                        "2",
                        "2000"});
            table947.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "September",
                        "2021",
                        "1",
                        "2000"});
            table947.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "September",
                        "2021",
                        "2",
                        "2000"});
            table947.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "October",
                        "2021",
                        "1",
                        "2000"});
            table947.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "October",
                        "2021",
                        "2",
                        "2000"});
#line 106
 testRunner.And("the Published Providers distribution period has the following profiles for fundin" +
                    "g line \'DSG-002\'", ((string)(null)), table947, "And ");
#line hidden
            TechTalk.SpecFlow.Table table948 = new TechTalk.SpecFlow.Table(new string[] {
                        "EntityType",
                        "CalculationId",
                        "TemplateId",
                        "Name"});
            table948.AddRow(new string[] {
                        "Calculation",
                        "5cfb28de-88d6-4faa-a936-d81a065fb596",
                        "219",
                        "Stub for total funding"});
#line 122
 testRunner.And("template mapping exists", ((string)(null)), table948, "And ");
#line hidden
            TechTalk.SpecFlow.Table table949 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table949.AddRow(new string[] {
                        "ProviderId",
                        "1000000"});
            table949.AddRow(new string[] {
                        "Name",
                        "Maintained School 1"});
            table949.AddRow(new string[] {
                        "Authority",
                        "Local Authority 1"});
            table949.AddRow(new string[] {
                        "DateOpened",
                        "2012-03-15"});
            table949.AddRow(new string[] {
                        "LACode",
                        "200"});
            table949.AddRow(new string[] {
                        "LocalAuthorityName",
                        "Maintained School 1"});
            table949.AddRow(new string[] {
                        "ProviderType",
                        "LA maintained schools"});
            table949.AddRow(new string[] {
                        "ProviderSubType",
                        "Community school"});
            table949.AddRow(new string[] {
                        "ProviderVersionId",
                        "dsg-providers-2.0"});
            table949.AddRow(new string[] {
                        "TrustStatus",
                        "Not Supported By A Trust"});
            table949.AddRow(new string[] {
                        "UKPRN",
                        "1000000"});
#line 125
 testRunner.And("the Published Provider has the following provider information", ((string)(null)), table949, "And ");
#line hidden
#line 138
 testRunner.And("the Published Provider is available in the repository for this specification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table950 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table950.AddRow(new string[] {
                        "ProviderId",
                        "1000000"});
            table950.AddRow(new string[] {
                        "Name",
                        "Maintained School 1 - Changed"});
            table950.AddRow(new string[] {
                        "Authority",
                        "Local Authority 1"});
            table950.AddRow(new string[] {
                        "DateOpened",
                        "2012-03-15"});
            table950.AddRow(new string[] {
                        "LACode",
                        "200"});
            table950.AddRow(new string[] {
                        "LocalAuthorityName",
                        "Maintained School 1"});
            table950.AddRow(new string[] {
                        "ProviderType",
                        "LA maintained schools"});
            table950.AddRow(new string[] {
                        "ProviderSubType",
                        "Community school"});
            table950.AddRow(new string[] {
                        "ProviderVersionId",
                        "dsg-providers-2.0"});
            table950.AddRow(new string[] {
                        "TrustStatus",
                        "Not Supported By A Trust"});
            table950.AddRow(new string[] {
                        "UKPRN",
                        "1000000"});
#line 139
 testRunner.And("the following provider exists within core provider data in provider version \'dsg-" +
                    "providers-2.0\'", ((string)(null)), table950, "And ");
#line hidden
#line 152
 testRunner.And("the provider with id \'1000000\' should be a scoped provider in the current specifi" +
                    "cation in provider version \'dsg-providers-2.0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table951 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table951.AddRow(new string[] {
                        "ProviderId",
                        "9000000"});
            table951.AddRow(new string[] {
                        "Name",
                        "Local Authority 1"});
            table951.AddRow(new string[] {
                        "Authority",
                        "Local Authority 1"});
            table951.AddRow(new string[] {
                        "DateOpened",
                        "2012-03-15"});
            table951.AddRow(new string[] {
                        "LACode",
                        "200"});
            table951.AddRow(new string[] {
                        "LocalAuthorityName",
                        "Local Authority 1"});
            table951.AddRow(new string[] {
                        "ProviderType",
                        "Local Authority"});
            table951.AddRow(new string[] {
                        "ProviderSubType",
                        "Local Authority"});
            table951.AddRow(new string[] {
                        "ProviderVersionId",
                        "<ProviderVersionId>"});
            table951.AddRow(new string[] {
                        "TrustStatus",
                        "Not Supported By A Trust"});
            table951.AddRow(new string[] {
                        "UKPRN",
                        "9000000"});
#line 154
 testRunner.And("the following provider exists within core provider data in provider version \'dsg-" +
                    "providers-2.0\'", ((string)(null)), table951, "And ");
#line hidden
            TechTalk.SpecFlow.Table table952 = new TechTalk.SpecFlow.Table(new string[] {
                        "CalculationType",
                        "CalculationId",
                        "Name",
                        "PublishStatus"});
            table952.AddRow(new string[] {
                        "Template",
                        "5cfb28de-88d6-4faa-a936-d81a065fb596",
                        "Stub for total funding",
                        "Approved"});
#line 167
 testRunner.And("calculation meta data exists for \'DSG\'", ((string)(null)), table952, "And ");
#line hidden
#line 170
 testRunner.And("variations are enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table953 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Order"});
            table953.AddRow(new string[] {
                        "ProviderMetadata",
                        "0"});
            table953.AddRow(new string[] {
                        "DsgTotalAllocationChange",
                        "1"});
            table953.AddRow(new string[] {
                        "FundingUpdated",
                        "2"});
            table953.AddRow(new string[] {
                        "ProfilingUpdated",
                        "3"});
            table953.AddRow(new string[] {
                        "PupilNumberSuccessor",
                        "4"});
#line 171
 testRunner.And("the funding configuration has the following funding variations", ((string)(null)), table953, "And ");
#line hidden
            TechTalk.SpecFlow.Table table954 = new TechTalk.SpecFlow.Table(new string[] {
                        "FundingStreamId",
                        "FundingPeriodId"});
            table954.AddRow(new string[] {
                        "DSG",
                        "FY-2021"});
#line 178
 testRunner.And("the following profile pattern exists", ((string)(null)), table954, "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("When the total allocation increases")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RefreshDsgVariationsWithSecondOccurrence")]
        public virtual void WhenTheTotalAllocationIncreases()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When the total allocation increases", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 182
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table955 = new TechTalk.SpecFlow.Table(new string[] {
                            "FundingStreamId",
                            "FundingLineId",
                            "PeriodType",
                            "TypeValue",
                            "Year",
                            "Occurrence"});
                table955.AddRow(new string[] {
                            "DSG",
                            "DSG-002",
                            "CalenderMonth",
                            "June",
                            "2021",
                            "2"});
#line 183
    testRunner.Given("the following variation pointers exist", ((string)(null)), table955, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table956 = new TechTalk.SpecFlow.Table(new string[] {
                            "Value",
                            "Id"});
                table956.AddRow(new string[] {
                            "21000",
                            "5cfb28de-88d6-4faa-a936-d81a065fb596"});
#line 186
 testRunner.And("the following calculation results also exist", ((string)(null)), table956, "And ");
#line hidden
                TechTalk.SpecFlow.Table table957 = new TechTalk.SpecFlow.Table(new string[] {
                            "DistributionPeriodId",
                            "Value"});
                table957.AddRow(new string[] {
                            "FY-2021",
                            "21000"});
#line 189
 testRunner.And("the following distribution periods exist", ((string)(null)), table957, "And ");
#line hidden
                TechTalk.SpecFlow.Table table958 = new TechTalk.SpecFlow.Table(new string[] {
                            "DistributionPeriodId",
                            "Type",
                            "TypeValue",
                            "Year",
                            "Occurrence",
                            "ProfiledValue"});
                table958.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "April",
                            "2021",
                            "1",
                            "3000"});
                table958.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "April",
                            "2021",
                            "2",
                            "3000"});
                table958.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "May",
                            "2021",
                            "1",
                            "3000"});
                table958.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "May",
                            "2021",
                            "2",
                            "3000"});
                table958.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "June",
                            "2021",
                            "1",
                            "3000"});
                table958.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "June",
                            "2021",
                            "2",
                            "3000"});
                table958.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "July",
                            "2021",
                            "1",
                            "3000"});
                table958.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "July",
                            "2021",
                            "2",
                            "3000"});
                table958.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "August",
                            "2021",
                            "1",
                            "3000"});
                table958.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "August",
                            "2021",
                            "2",
                            "3000"});
                table958.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "September",
                            "2021",
                            "1",
                            "3000"});
                table958.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "September",
                            "2021",
                            "2",
                            "3000"});
                table958.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "October",
                            "2021",
                            "1",
                            "3000"});
                table958.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "October",
                            "2021",
                            "2",
                            "3000"});
#line 192
 testRunner.And("the following profiles exist", ((string)(null)), table958, "And ");
#line hidden
#line 208
 testRunner.When("funding is refreshed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table959 = new TechTalk.SpecFlow.Table(new string[] {
                            "FundingLineCode",
                            "DistributionPeriodId",
                            "Type",
                            "TypeValue",
                            "Year",
                            "Occurrence",
                            "ProfiledValue"});
                table959.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "April",
                            "2021",
                            "1",
                            "2000"});
                table959.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "April",
                            "2021",
                            "2",
                            "2000"});
                table959.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "May",
                            "2021",
                            "1",
                            "2000"});
                table959.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "May",
                            "2021",
                            "2",
                            "2000"});
                table959.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "June",
                            "2021",
                            "1",
                            "5000"});
                table959.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "June",
                            "2021",
                            "2",
                            "5000"});
                table959.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "July",
                            "2021",
                            "1",
                            "3000"});
                table959.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "July",
                            "2021",
                            "2",
                            "3000"});
                table959.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "August",
                            "2021",
                            "1",
                            "3000"});
                table959.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "August",
                            "2021",
                            "2",
                            "3000"});
                table959.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "September",
                            "2021",
                            "1",
                            "3000"});
                table959.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "September",
                            "2021",
                            "2",
                            "3000"});
                table959.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "October",
                            "2021",
                            "1",
                            "3000"});
                table959.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "October",
                            "2021",
                            "2",
                            "3000"});
#line 209
 testRunner.Then("the upserted provider version for \'1000000\' has the following funding line profil" +
                        "e periods", ((string)(null)), table959, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table960 = new TechTalk.SpecFlow.Table(new string[] {
                            "FundingLineCode",
                            "Value"});
                table960.AddRow(new string[] {
                            "TotalAllocation",
                            "21000"});
#line 225
 testRunner.And("the upserted provider version for \'1000000\' has the funding line totals", ((string)(null)), table960, "And ");
#line hidden
#line 228
 testRunner.And("the upserted provider version for \'1000000\' has no funding line over payments for" +
                        " funding line \'DSG-002\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table961 = new TechTalk.SpecFlow.Table(new string[] {
                            "ProviderId",
                            "VariationReason"});
                table961.AddRow(new string[] {
                            "1000000",
                            "FundingUpdated"});
                table961.AddRow(new string[] {
                            "1000000",
                            "NameFieldUpdated"});
                table961.AddRow(new string[] {
                            "1000000",
                            "ProfilingUpdated"});
#line 229
 testRunner.And("the provider variation reasons were recorded", ((string)(null)), table961, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("When the total allocation decreases but repaid in period")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RefreshDsgVariationsWithSecondOccurrence")]
        public virtual void WhenTheTotalAllocationDecreasesButRepaidInPeriod()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When the total allocation decreases but repaid in period", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 235
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table962 = new TechTalk.SpecFlow.Table(new string[] {
                            "FundingStreamId",
                            "FundingLineId",
                            "PeriodType",
                            "TypeValue",
                            "Year",
                            "Occurrence"});
                table962.AddRow(new string[] {
                            "DSG",
                            "DSG-002",
                            "CalenderMonth",
                            "May",
                            "2021",
                            "1"});
#line 236
    testRunner.Given("the following variation pointers exist", ((string)(null)), table962, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table963 = new TechTalk.SpecFlow.Table(new string[] {
                            "Value",
                            "Id"});
                table963.AddRow(new string[] {
                            "3500",
                            "5cfb28de-88d6-4faa-a936-d81a065fb596"});
#line 239
 testRunner.And("the following calculation results also exist", ((string)(null)), table963, "And ");
#line hidden
                TechTalk.SpecFlow.Table table964 = new TechTalk.SpecFlow.Table(new string[] {
                            "DistributionPeriodId",
                            "Value"});
                table964.AddRow(new string[] {
                            "FY-2021",
                            "3500"});
#line 242
 testRunner.And("the following distribution periods exist", ((string)(null)), table964, "And ");
#line hidden
                TechTalk.SpecFlow.Table table965 = new TechTalk.SpecFlow.Table(new string[] {
                            "DistributionPeriodId",
                            "Type",
                            "TypeValue",
                            "Year",
                            "Occurrence",
                            "ProfiledValue"});
                table965.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "April",
                            "2021",
                            "1",
                            "500"});
                table965.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "May",
                            "2021",
                            "1",
                            "500"});
                table965.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "June",
                            "2021",
                            "1",
                            "500"});
                table965.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "July",
                            "2021",
                            "1",
                            "500"});
                table965.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "August",
                            "2021",
                            "1",
                            "500"});
                table965.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "September",
                            "2021",
                            "1",
                            "500"});
                table965.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "October",
                            "2021",
                            "1",
                            "500"});
#line 245
 testRunner.And("the following profiles exist", ((string)(null)), table965, "And ");
#line hidden
#line 254
 testRunner.When("funding is refreshed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table966 = new TechTalk.SpecFlow.Table(new string[] {
                            "FundingLineCode",
                            "DistributionPeriodId",
                            "Type",
                            "TypeValue",
                            "Year",
                            "Occurrence",
                            "ProfiledValue"});
                table966.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "April",
                            "2021",
                            "1",
                            "2000"});
                table966.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "May",
                            "2021",
                            "1",
                            "0"});
                table966.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "June",
                            "2021",
                            "1",
                            "0"});
                table966.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "July",
                            "2021",
                            "1",
                            "0"});
                table966.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "August",
                            "2021",
                            "1",
                            "500"});
                table966.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "September",
                            "2021",
                            "1",
                            "500"});
                table966.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "October",
                            "2021",
                            "1",
                            "500"});
#line 255
 testRunner.Then("the upserted provider version for \'1000000\' has the following funding line profil" +
                        "e periods", ((string)(null)), table966, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table967 = new TechTalk.SpecFlow.Table(new string[] {
                            "FundingLineCode",
                            "Value"});
                table967.AddRow(new string[] {
                            "TotalAllocation",
                            "3500"});
#line 264
 testRunner.And("the upserted provider version for \'1000000\' has the funding line totals", ((string)(null)), table967, "And ");
#line hidden
#line 267
 testRunner.And("the upserted provider version for \'1000000\' has no funding line over payments for" +
                        " funding line \'DSG-002\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table968 = new TechTalk.SpecFlow.Table(new string[] {
                            "ProviderId",
                            "VariationReason"});
                table968.AddRow(new string[] {
                            "1000000",
                            "FundingUpdated"});
                table968.AddRow(new string[] {
                            "1000000",
                            "NameFieldUpdated"});
                table968.AddRow(new string[] {
                            "1000000",
                            "ProfilingUpdated"});
#line 268
 testRunner.And("the provider variation reasons were recorded", ((string)(null)), table968, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("When the total allocation decreases and leaves an overpayment outside of the peri" +
            "od")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RefreshDsgVariationsWithSecondOccurrence")]
        public virtual void WhenTheTotalAllocationDecreasesAndLeavesAnOverpaymentOutsideOfThePeriod()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When the total allocation decreases and leaves an overpayment outside of the peri" +
                    "od", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 274
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table969 = new TechTalk.SpecFlow.Table(new string[] {
                            "FundingStreamId",
                            "FundingLineId",
                            "PeriodType",
                            "TypeValue",
                            "Year",
                            "Occurrence"});
                table969.AddRow(new string[] {
                            "DSG",
                            "DSG-002",
                            "CalenderMonth",
                            "September",
                            "2021",
                            "1"});
#line 275
    testRunner.Given("the following variation pointers exist", ((string)(null)), table969, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table970 = new TechTalk.SpecFlow.Table(new string[] {
                            "Value",
                            "Id"});
                table970.AddRow(new string[] {
                            "3500",
                            "5cfb28de-88d6-4faa-a936-d81a065fb596"});
#line 278
 testRunner.And("the following calculation results also exist", ((string)(null)), table970, "And ");
#line hidden
                TechTalk.SpecFlow.Table table971 = new TechTalk.SpecFlow.Table(new string[] {
                            "DistributionPeriodId",
                            "Value"});
                table971.AddRow(new string[] {
                            "FY-2021",
                            "3500"});
#line 281
 testRunner.And("the following distribution periods exist", ((string)(null)), table971, "And ");
#line hidden
                TechTalk.SpecFlow.Table table972 = new TechTalk.SpecFlow.Table(new string[] {
                            "DistributionPeriodId",
                            "Type",
                            "TypeValue",
                            "Year",
                            "Occurrence",
                            "ProfiledValue"});
                table972.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "April",
                            "2021",
                            "1",
                            "500"});
                table972.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "May",
                            "2021",
                            "1",
                            "500"});
                table972.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "June",
                            "2021",
                            "1",
                            "500"});
                table972.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "July",
                            "2021",
                            "1",
                            "500"});
                table972.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "August",
                            "2021",
                            "1",
                            "500"});
                table972.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "September",
                            "2021",
                            "1",
                            "500"});
                table972.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "October",
                            "2021",
                            "1",
                            "500"});
#line 284
 testRunner.And("the following profiles exist", ((string)(null)), table972, "And ");
#line hidden
#line 293
 testRunner.When("funding is refreshed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table973 = new TechTalk.SpecFlow.Table(new string[] {
                            "FundingLineCode",
                            "DistributionPeriodId",
                            "Type",
                            "TypeValue",
                            "Year",
                            "Occurrence",
                            "ProfiledValue"});
                table973.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "April",
                            "2021",
                            "1",
                            "2000"});
                table973.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "May",
                            "2021",
                            "1",
                            "2000"});
                table973.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "June",
                            "2021",
                            "1",
                            "2000"});
                table973.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "July",
                            "2021",
                            "1",
                            "2000"});
                table973.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "August",
                            "2021",
                            "1",
                            "2000"});
                table973.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "September",
                            "2021",
                            "1",
                            "0"});
                table973.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "October",
                            "2021",
                            "1",
                            "0"});
#line 294
 testRunner.Then("the upserted provider version for \'1000000\' has the following funding line profil" +
                        "e periods", ((string)(null)), table973, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table974 = new TechTalk.SpecFlow.Table(new string[] {
                            "FundingLineCode",
                            "Value"});
                table974.AddRow(new string[] {
                            "TotalAllocation",
                            "10000"});
#line 303
 testRunner.And("the upserted provider version for \'1000000\' has the funding line totals", ((string)(null)), table974, "And ");
#line hidden
                TechTalk.SpecFlow.Table table975 = new TechTalk.SpecFlow.Table(new string[] {
                            "FundingLineCode",
                            "OverPayment"});
                table975.AddRow(new string[] {
                            "DSG-002",
                            "6500"});
#line 306
 testRunner.And("the upserted provider version for \'1000000\' has the following funding line over p" +
                        "ayments", ((string)(null)), table975, "And ");
#line hidden
                TechTalk.SpecFlow.Table table976 = new TechTalk.SpecFlow.Table(new string[] {
                            "ProviderId",
                            "VariationReason"});
                table976.AddRow(new string[] {
                            "1000000",
                            "FundingUpdated"});
                table976.AddRow(new string[] {
                            "1000000",
                            "NameFieldUpdated"});
                table976.AddRow(new string[] {
                            "1000000",
                            "ProfilingUpdated"});
#line 309
 testRunner.And("the provider variation reasons were recorded", ((string)(null)), table976, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
