// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CalculateFunding.Publishing.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ApproveAllFunding1619Feature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "ApproveAllFunding1619.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "ApproveAllFunding1619", "\tIn order to approve funding for 1619\r\n\tAs a funding approver\r\n\tI want to approve" +
                    " funding for all providers within a specification", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "ApproveAllFunding1619")))
            {
                global::CalculateFunding.Publishing.AcceptanceTests.Features.ApproveAllFunding1619Feature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SuccessfulApproveOfFunding(string fundingStreamId, string fundingPeriodId, string fundingPeriodName, string templateVersion, string providerVersionId, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FundingStreamId", fundingStreamId);
            argumentsOfScenario.Add("FundingPeriodId", fundingPeriodId);
            argumentsOfScenario.Add("FundingPeriodName", fundingPeriodName);
            argumentsOfScenario.Add("TemplateVersion", templateVersion);
            argumentsOfScenario.Add("ProviderVersionId", providerVersionId);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successful approve of funding", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1.AddRow(new string[] {
                            "DefaultTemplateVersion",
                            "1.2"});
                table1.AddRow(new string[] {
                            "PaymentOrganisationSource",
                            "PaymentOrganisationFields"});
#line 7
 testRunner.Given(string.Format("a funding configuration exists for funding stream \'{0}\' in funding period \'{1}\'", fundingStreamId, fundingPeriodId), ((string)(null)), table1, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table2.AddRow(new string[] {
                            "GroupTypeIdentifier",
                            "UKPRN"});
                table2.AddRow(new string[] {
                            "GroupingReason",
                            "Contracting"});
                table2.AddRow(new string[] {
                            "GroupTypeClassification",
                            "LegalEntity"});
                table2.AddRow(new string[] {
                            "OrganisationGroupTypeCode",
                            "LocalAuthoritySsf"});
#line 11
 testRunner.And("the funding configuration has the following organisation group", ((string)(null)), table2, "And ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "ProviderType",
                            "ProviderSubtype"});
                table3.AddRow(new string[] {
                            "Schoo",
                            "08SSF"});
#line 17
 testRunner.And("the funding configuration has the following provider type matches", ((string)(null)), table3, "And ");
#line hidden
#line 20
 testRunner.And("the funding configuration is available in the policies repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table4.AddRow(new string[] {
                            "GroupTypeIdentifier",
                            "UKPRN"});
                table4.AddRow(new string[] {
                            "GroupingReason",
                            "Contracting"});
                table4.AddRow(new string[] {
                            "GroupTypeClassification",
                            "LegalEntity"});
                table4.AddRow(new string[] {
                            "OrganisationGroupTypeCode",
                            "LocalAuthority"});
#line 21
 testRunner.And("the funding configuration has the following organisation group", ((string)(null)), table4, "And ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "ProviderType",
                            "ProviderSubtype"});
                table5.AddRow(new string[] {
                            "Local",
                            "10LAU"});
#line 27
 testRunner.And("the funding configuration has the following provider type matches", ((string)(null)), table5, "And ");
#line hidden
#line 30
 testRunner.And("the funding configuration is available in the policies repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table6.AddRow(new string[] {
                            "GroupTypeIdentifier",
                            "LACode"});
                table6.AddRow(new string[] {
                            "GroupingReason",
                            "Information"});
                table6.AddRow(new string[] {
                            "GroupTypeClassification",
                            "GeographicalBoundary"});
                table6.AddRow(new string[] {
                            "OrganisationGroupTypeCode",
                            "LocalAuthority"});
#line 31
 testRunner.And("the funding configuration has the following organisation group", ((string)(null)), table6, "And ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "ProviderType",
                            "ProviderSubtype"});
                table7.AddRow(new string[] {
                            "Local",
                            "10LAU"});
                table7.AddRow(new string[] {
                            "Furth",
                            "22OTH"});
                table7.AddRow(new string[] {
                            "Schoo",
                            "08SSF"});
                table7.AddRow(new string[] {
                            "Acade",
                            "11ACA"});
                table7.AddRow(new string[] {
                            "Acade",
                            "FSAP"});
                table7.AddRow(new string[] {
                            "Acade",
                            "17NMF"});
                table7.AddRow(new string[] {
                            "Acade",
                            "12FSC"});
                table7.AddRow(new string[] {
                            "Acade",
                            "13SSA"});
                table7.AddRow(new string[] {
                            "Acade",
                            "19FSS"});
                table7.AddRow(new string[] {
                            "Acade",
                            "15UTC"});
                table7.AddRow(new string[] {
                            "Acade",
                            "14CTC"});
                table7.AddRow(new string[] {
                            "Acade",
                            "FS1619"});
                table7.AddRow(new string[] {
                            "Acade",
                            "22AAP"});
                table7.AddRow(new string[] {
                            "Furth",
                            "01GFE"});
                table7.AddRow(new string[] {
                            "Furth",
                            "02IPP"});
                table7.AddRow(new string[] {
                            "Furth",
                            "18ISP"});
                table7.AddRow(new string[] {
                            "Furth",
                            "03SFC"});
                table7.AddRow(new string[] {
                            "Furth",
                            "04AHC"});
                table7.AddRow(new string[] {
                            "Furth",
                            "07HEP"});
                table7.AddRow(new string[] {
                            "Furth",
                            "05ADC"});
                table7.AddRow(new string[] {
                            "Furth",
                            "06SDC"});
                table7.AddRow(new string[] {
                            "N1618",
                            "16NPF"});
#line 37
 testRunner.And("the funding configuration has the following provider type matches", ((string)(null)), table7, "And ");
#line hidden
#line 61
 testRunner.And("the funding configuration is available in the policies repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table8.AddRow(new string[] {
                            "GroupTypeIdentifier",
                            "UKPRN"});
                table8.AddRow(new string[] {
                            "GroupingReason",
                            "Payment"});
                table8.AddRow(new string[] {
                            "GroupTypeClassification",
                            "LegalEntity"});
                table8.AddRow(new string[] {
                            "OrganisationGroupTypeCode",
                            "AcademyTrust"});
#line 62
 testRunner.And("the funding configuration has the following organisation group", ((string)(null)), table8, "And ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "ProviderType",
                            "ProviderSubtype"});
                table9.AddRow(new string[] {
                            "Acade",
                            "11ACA"});
                table9.AddRow(new string[] {
                            "Acade",
                            "FSAP"});
                table9.AddRow(new string[] {
                            "Acade",
                            "17NMF"});
                table9.AddRow(new string[] {
                            "Acade",
                            "12FSC"});
                table9.AddRow(new string[] {
                            "Acade",
                            "13SSA"});
                table9.AddRow(new string[] {
                            "Acade",
                            "19FSS"});
                table9.AddRow(new string[] {
                            "Acade",
                            "15UTC"});
                table9.AddRow(new string[] {
                            "Acade",
                            "14CTC"});
                table9.AddRow(new string[] {
                            "Acade",
                            "FS1619"});
                table9.AddRow(new string[] {
                            "Acade",
                            "22AAP"});
#line 68
 testRunner.And("the funding configuration has the following provider type matches", ((string)(null)), table9, "And ");
#line hidden
#line 80
 testRunner.And("the funding configuration is available in the policies repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table10.AddRow(new string[] {
                            "GroupTypeIdentifier",
                            "UKPRN"});
                table10.AddRow(new string[] {
                            "GroupingReason",
                            "Contracting"});
                table10.AddRow(new string[] {
                            "GroupTypeClassification",
                            "LegalEntity"});
                table10.AddRow(new string[] {
                            "OrganisationGroupTypeCode",
                            "Provider"});
#line 81
 testRunner.And("the funding configuration has the following organisation group", ((string)(null)), table10, "And ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "ProviderType",
                            "ProviderSubtype"});
                table11.AddRow(new string[] {
                            "Furth",
                            "01GFE"});
                table11.AddRow(new string[] {
                            "Furth",
                            "02IPP"});
                table11.AddRow(new string[] {
                            "Furth",
                            "18ISP"});
                table11.AddRow(new string[] {
                            "Furth",
                            "03SFC"});
                table11.AddRow(new string[] {
                            "Furth",
                            "04AHC"});
                table11.AddRow(new string[] {
                            "Furth",
                            "07HEP"});
                table11.AddRow(new string[] {
                            "Furth",
                            "05ADC"});
                table11.AddRow(new string[] {
                            "Furth",
                            "06SDC"});
                table11.AddRow(new string[] {
                            "N1618",
                            "16NPF"});
                table11.AddRow(new string[] {
                            "Furth",
                            "22OTH"});
#line 87
 testRunner.And("the funding configuration has the following provider type matches", ((string)(null)), table11, "And ");
#line hidden
#line 99
 testRunner.And("the funding configuration is available in the policies repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table12.AddRow(new string[] {
                            "Id",
                            string.Format("{0}", fundingPeriodId)});
                table12.AddRow(new string[] {
                            "Name",
                            string.Format("{0}", fundingPeriodName)});
                table12.AddRow(new string[] {
                            "StartDate",
                            "2019-08-01 00:00:00"});
                table12.AddRow(new string[] {
                            "EndDate",
                            "2020-07-31 00:00:00"});
                table12.AddRow(new string[] {
                            "Period",
                            "2021"});
                table12.AddRow(new string[] {
                            "Type",
                            "AS"});
#line 100
 testRunner.And("the funding period exists in the policies service", ((string)(null)), table12, "And ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table13.AddRow(new string[] {
                            "Id",
                            "specForPublishing"});
                table13.AddRow(new string[] {
                            "Name",
                            "Test Specification for Publishing"});
                table13.AddRow(new string[] {
                            "IsSelectedForFunding",
                            "true"});
                table13.AddRow(new string[] {
                            "ProviderVersionId",
                            string.Format("{0}", providerVersionId)});
#line 108
 testRunner.And("the following specification exists", ((string)(null)), table13, "And ");
#line hidden
#line 114
 testRunner.And(string.Format("the specification has the funding period with id \'{0}\' and name \'{1}\'", fundingPeriodId, fundingPeriodName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Id"});
                table14.AddRow(new string[] {
                            "1619",
                            string.Format("{0}", fundingStreamId)});
#line 115
 testRunner.And("the specification has the following funding streams", ((string)(null)), table14, "And ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table15.AddRow(new string[] {
                            string.Format("{0}", fundingStreamId),
                            "1.2"});
#line 118
 testRunner.And("the specification has the following template versions for funding streams", ((string)(null)), table15, "And ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table16.AddRow(new string[] {
                            "StatusChangedDate",
                            "2019-09-27 00:00:00"});
                table16.AddRow(new string[] {
                            "ExternalPublicationDate",
                            "2019-09-28 00:00:00"});
                table16.AddRow(new string[] {
                            "EarliestPaymentAvailableDate",
                            "2019-09-29 00:00:00"});
#line 121
 testRunner.And("the publishing dates for the specifcation are set as following", ((string)(null)), table16, "And ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table17.AddRow(new string[] {
                            "JobDefinitionId",
                            "PublishFundingJob"});
                table17.AddRow(new string[] {
                            "InvokerUserId",
                            "PublishUserId"});
                table17.AddRow(new string[] {
                            "InvokerUserDisplayName",
                            "Invoker User"});
                table17.AddRow(new string[] {
                            "ParentJobId",
                            ""});
#line 126
 testRunner.And("the following job is requested to be queued for the current specification", ((string)(null)), table17, "And ");
#line hidden
#line 132
 testRunner.And("the job is submitted to the job service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 133
 testRunner.And(string.Format("the provider version \'1619-providers-1_0\' exists in the provider service for \'{0}" +
                            "\'", providerVersionId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 134
 testRunner.And("template mapping \'1619-TemplateMapping\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 135
 testRunner.And("the Published Provider \'1619-AS-2021-1000000\' has been been previously generated " +
                        "for the current specification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 136
 testRunner.And("the Published Provider is available in the repository for this specification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 137
 testRunner.And(string.Format("the provider with id \'1000000\' should be a scoped provider in the current specifi" +
                            "cation in provider version \'{0}\'", providerVersionId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 138
 testRunner.And("the Published Provider \'1619-AS-2021-1000002\' has been been previously generated " +
                        "for the current specification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 139
 testRunner.And("the Published Provider is available in the repository for this specification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 140
 testRunner.And(string.Format("the provider with id \'1000002\' should be a scoped provider in the current specifi" +
                            "cation in provider version \'{0}\'", providerVersionId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 141
 testRunner.And("calculations \'1619-approve-all-funding-calculations\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 142
 testRunner.When("funding is approved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "PublishedProviderId",
                            "Status"});
                table18.AddRow(new string[] {
                            string.Format("publishedprovider-1000000-{0}-{1}", fundingPeriodId, fundingStreamId),
                            "Approved"});
                table18.AddRow(new string[] {
                            string.Format("publishedprovider-1000002-{0}-{1}", fundingPeriodId, fundingStreamId),
                            "Approved"});
#line 143
 testRunner.Then("the following published provider ids are upserted", ((string)(null)), table18, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "ID",
                            "ProviderType",
                            "ProviderSubType",
                            "LocalAuthority",
                            "FundingStatus",
                            "ProviderName",
                            "UKPRN",
                            "FundingValue",
                            "SpecificationId",
                            "FundingStreamId",
                            "FundingPeriodId",
                            "UPIN",
                            "URN",
                            "Errors",
                            "Indicative",
                            "MajorVersion",
                            "MinorVersion"});
                table19.AddRow(new string[] {
                            "1619-AS-2021-1000002",
                            "Acade",
                            "11ACA",
                            "West Sussex",
                            "Approved",
                            "Midhurst Rother College",
                            "1000002",
                            "566380.82",
                            "specForPublishing",
                            string.Format("{0}", fundingStreamId),
                            string.Format("{0}", fundingPeriodId),
                            "118907",
                            "135760",
                            "",
                            "Hide indicative allocations",
                            "2",
                            "0"});
#line 147
 testRunner.And(string.Format("the following published provider search index items is produced for providerid wi" +
                            "th \'{0}\' and \'{1}\'", fundingStreamId, fundingPeriodId), ((string)(null)), table19, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Successful approve of funding: 1619")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ApproveAllFunding1619")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1619")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:FundingStreamId", "1619")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:FundingPeriodId", "AS-2021")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:FundingPeriodName", "Financial Year 2020-21")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TemplateVersion", "1.2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ProviderVersionId", "1619-providers-1.0")]
        public virtual void SuccessfulApproveOfFunding_1619()
        {
#line 6
this.SuccessfulApproveOfFunding("1619", "AS-2021", "Financial Year 2020-21", "1.2", "1619-providers-1.0", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
