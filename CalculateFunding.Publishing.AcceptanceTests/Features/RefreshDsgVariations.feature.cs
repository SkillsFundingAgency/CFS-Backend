// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CalculateFunding.Publishing.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class RefreshDsgVariationsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "RefreshDsgVariations.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "RefreshDsgVariations", "\tIn order to refresh funding for DSG\r\n\tAs a funding approver\r\n\tI want to refresh " +
                    "funding for all approved providers within a specification\r\n\tAnd for variations w" +
                    "ith the allocations to be taken into account ", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "RefreshDsgVariations")))
            {
                global::CalculateFunding.Publishing.AcceptanceTests.Features.RefreshDsgVariationsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
            TechTalk.SpecFlow.Table table276 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table276.AddRow(new string[] {
                        "DefaultTemplateVersion",
                        "2.0"});
#line 8
 testRunner.Given("a funding configuration exists for funding stream \'DSG\' in funding period \'FY-202" +
                    "1\'", ((string)(null)), table276, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table277 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table277.AddRow(new string[] {
                        "GroupTypeIdentifier",
                        "UKPRN"});
            table277.AddRow(new string[] {
                        "GroupingReason",
                        "Payment"});
            table277.AddRow(new string[] {
                        "GroupTypeClassification",
                        "LegalEntity"});
            table277.AddRow(new string[] {
                        "OrganisationGroupTypeCode",
                        "LocalAuthority"});
#line 11
 testRunner.And("the funding configuration has the following organisation group", ((string)(null)), table277, "And ");
#line 17
 testRunner.And("the funding configuration is available in the policies repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table278 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table278.AddRow(new string[] {
                        "GroupTypeIdentifier",
                        "LACode"});
            table278.AddRow(new string[] {
                        "GroupingReason",
                        "Information"});
            table278.AddRow(new string[] {
                        "GroupTypeClassification",
                        "GeographicalBoundary"});
            table278.AddRow(new string[] {
                        "OrganisationGroupTypeCode",
                        "LocalAuthority"});
#line 18
 testRunner.And("the funding configuration has the following organisation group", ((string)(null)), table278, "And ");
#line 24
 testRunner.And("the funding configuration is available in the policies repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table279 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table279.AddRow(new string[] {
                        "GroupTypeIdentifier",
                        "LocalAuthorityClassificationTypeCode"});
            table279.AddRow(new string[] {
                        "GroupingReason",
                        "Information"});
            table279.AddRow(new string[] {
                        "GroupTypeClassification",
                        "GeographicalBoundary"});
            table279.AddRow(new string[] {
                        "OrganisationGroupTypeCode",
                        "LocalGovernmentGroup"});
#line 25
 testRunner.And("the funding configuration has the following organisation group", ((string)(null)), table279, "And ");
#line 31
 testRunner.And("the funding configuration is available in the policies repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table280 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table280.AddRow(new string[] {
                        "GroupTypeIdentifier",
                        "GovernmentOfficeRegionCode"});
            table280.AddRow(new string[] {
                        "GroupingReason",
                        "Information"});
            table280.AddRow(new string[] {
                        "GroupTypeClassification",
                        "GeographicalBoundary"});
            table280.AddRow(new string[] {
                        "OrganisationGroupTypeCode",
                        "GovernmentOfficeRegion"});
#line 32
 testRunner.And("the funding configuration has the following organisation group", ((string)(null)), table280, "And ");
#line 38
 testRunner.And("the funding configuration is available in the policies repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table281 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table281.AddRow(new string[] {
                        "GroupTypeIdentifier",
                        "CountryCode"});
            table281.AddRow(new string[] {
                        "GroupingReason",
                        "Information"});
            table281.AddRow(new string[] {
                        "GroupTypeClassification",
                        "GeographicalBoundary"});
            table281.AddRow(new string[] {
                        "OrganisationGroupTypeCode",
                        "Country"});
#line 39
 testRunner.And("the funding configuration has the following organisation group", ((string)(null)), table281, "And ");
#line 45
 testRunner.And("the funding configuration is available in the policies repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table282 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table282.AddRow(new string[] {
                        "Id",
                        "FY-2021"});
            table282.AddRow(new string[] {
                        "Name",
                        "Financial Year 2020-21"});
            table282.AddRow(new string[] {
                        "StartDate",
                        "2019-08-01 00:00:00"});
            table282.AddRow(new string[] {
                        "EndDate",
                        "2020-07-31 00:00:00"});
            table282.AddRow(new string[] {
                        "Period",
                        "2021"});
            table282.AddRow(new string[] {
                        "Type",
                        "FY"});
#line 46
 testRunner.And("the funding period exists in the policies service", ((string)(null)), table282, "And ");
#line hidden
            TechTalk.SpecFlow.Table table283 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table283.AddRow(new string[] {
                        "Id",
                        "specForPublishing"});
            table283.AddRow(new string[] {
                        "Name",
                        "Test Specification for Publishing"});
            table283.AddRow(new string[] {
                        "IsSelectedForFunding",
                        "true"});
            table283.AddRow(new string[] {
                        "ProviderVersionId",
                        "dsg-providers-2.0"});
#line 54
 testRunner.And("the following specification exists", ((string)(null)), table283, "And ");
#line 60
 testRunner.And("the specification has the funding period with id \'FY-2021\' and name \'Financial Ye" +
                    "ar 2020-21\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table284 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Id"});
            table284.AddRow(new string[] {
                        "DSG",
                        "DSG"});
#line 61
 testRunner.And("the specification has the following funding streams", ((string)(null)), table284, "And ");
#line hidden
            TechTalk.SpecFlow.Table table285 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table285.AddRow(new string[] {
                        "DSG",
                        "2.0"});
#line 64
 testRunner.And("the specification has the following template versions for funding streams", ((string)(null)), table285, "And ");
#line hidden
            TechTalk.SpecFlow.Table table286 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table286.AddRow(new string[] {
                        "StatusChangedDate",
                        "2019-09-27 00:00:00"});
            table286.AddRow(new string[] {
                        "ExternalPublicationDate",
                        "2019-09-28 00:00:00"});
            table286.AddRow(new string[] {
                        "EarliestPaymentAvailableDate",
                        "2019-09-29 00:00:00"});
#line 67
 testRunner.And("the publishing dates for the specifcation are set as following", ((string)(null)), table286, "And ");
#line hidden
            TechTalk.SpecFlow.Table table287 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table287.AddRow(new string[] {
                        "JobDefinitionId",
                        "PublishFundingJob"});
            table287.AddRow(new string[] {
                        "InvokerUserId",
                        "PublishUserId"});
            table287.AddRow(new string[] {
                        "InvokerUserDisplayName",
                        "Invoker User"});
            table287.AddRow(new string[] {
                        "ParentJobId",
                        ""});
#line 72
 testRunner.And("the following job is requested to be queued for the current specification", ((string)(null)), table287, "And ");
#line 78
 testRunner.And("the job is submitted to the job service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table288 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table288.AddRow(new string[] {
                        "ProviderVersionId",
                        "dsg-providers-2.0"});
            table288.AddRow(new string[] {
                        "VersionType",
                        "Custom"});
            table288.AddRow(new string[] {
                        "Name",
                        "DSG Provider Version"});
            table288.AddRow(new string[] {
                        "Description",
                        "Acceptance Tests"});
            table288.AddRow(new string[] {
                        "Version",
                        "2"});
            table288.AddRow(new string[] {
                        "TargetDate",
                        "2019-12-12 00:00"});
            table288.AddRow(new string[] {
                        "FundingStream",
                        "DSG"});
            table288.AddRow(new string[] {
                        "Created",
                        "2019-12-11 00:00"});
#line 79
 testRunner.And("the following provider version exists in the providers service", ((string)(null)), table288, "And ");
#line hidden
            TechTalk.SpecFlow.Table table289 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table289.AddRow(new string[] {
                        "ProviderId",
                        "1000000"});
            table289.AddRow(new string[] {
                        "FundingStreamId",
                        "DSG"});
            table289.AddRow(new string[] {
                        "FundingPeriodId",
                        "FY-2021"});
            table289.AddRow(new string[] {
                        "TemplateVersion",
                        "1.0"});
            table289.AddRow(new string[] {
                        "Status",
                        "Released"});
            table289.AddRow(new string[] {
                        "TotalFunding",
                        "14000"});
            table289.AddRow(new string[] {
                        "MajorVersion",
                        "0"});
            table289.AddRow(new string[] {
                        "MinorVersion",
                        "1"});
#line 89
 testRunner.And("the following Published Provider has been previously generated for the current sp" +
                    "ecification", ((string)(null)), table289, "And ");
#line hidden
            TechTalk.SpecFlow.Table table290 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "FundingLineCode",
                        "Value",
                        "TemplateLineId",
                        "Type"});
            table290.AddRow(new string[] {
                        "Total DSG after deductions and recoupment",
                        "DSG-002",
                        "14000",
                        "3",
                        "Payment"});
#line 99
 testRunner.And("the Published Provider has the following funding lines", ((string)(null)), table290, "And ");
#line hidden
            TechTalk.SpecFlow.Table table291 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriodId",
                        "Value"});
            table291.AddRow(new string[] {
                        "FY-2021",
                        "14000"});
#line 102
 testRunner.And("the Published Provider has the following distribution period for funding line \'DS" +
                    "G-002\'", ((string)(null)), table291, "And ");
#line hidden
            TechTalk.SpecFlow.Table table292 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriodId",
                        "Type",
                        "TypeValue",
                        "Year",
                        "Occurrence",
                        "ProfiledValue"});
            table292.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "April",
                        "2021",
                        "1",
                        "2000"});
            table292.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "May",
                        "2021",
                        "1",
                        "2000"});
            table292.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "June",
                        "2021",
                        "1",
                        "2000"});
            table292.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "July",
                        "2021",
                        "1",
                        "2000"});
            table292.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "August",
                        "2021",
                        "1",
                        "2000"});
            table292.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "September",
                        "2021",
                        "1",
                        "2000"});
            table292.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "October",
                        "2021",
                        "1",
                        "2000"});
#line 105
 testRunner.And("the Published Providers distribution period has the following profiles for fundin" +
                    "g line \'DSG-002\'", ((string)(null)), table292, "And ");
#line hidden
            TechTalk.SpecFlow.Table table293 = new TechTalk.SpecFlow.Table(new string[] {
                        "EntityType",
                        "CalculationId",
                        "TemplateId",
                        "Name"});
            table293.AddRow(new string[] {
                        "Calculation",
                        "5cfb28de-88d6-4faa-a936-d81a065fb596",
                        "219",
                        "Stub for total funding"});
#line 114
 testRunner.And("template mapping exists", ((string)(null)), table293, "And ");
#line hidden
            TechTalk.SpecFlow.Table table294 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table294.AddRow(new string[] {
                        "ProviderId",
                        "1000000"});
            table294.AddRow(new string[] {
                        "Name",
                        "Maintained School 1"});
            table294.AddRow(new string[] {
                        "Authority",
                        "Local Authority 1"});
            table294.AddRow(new string[] {
                        "DateOpened",
                        "2012-03-15"});
            table294.AddRow(new string[] {
                        "LACode",
                        "200"});
            table294.AddRow(new string[] {
                        "LocalAuthorityName",
                        "Maintained School 1"});
            table294.AddRow(new string[] {
                        "ProviderType",
                        "LA maintained schools"});
            table294.AddRow(new string[] {
                        "ProviderSubType",
                        "Community school"});
            table294.AddRow(new string[] {
                        "ProviderVersionId",
                        "dsg-providers-2.0"});
            table294.AddRow(new string[] {
                        "TrustStatus",
                        "Not Supported By A Trust"});
            table294.AddRow(new string[] {
                        "UKPRN",
                        "1000000"});
#line 117
 testRunner.And("the Published Provider has the following provider information", ((string)(null)), table294, "And ");
#line 130
 testRunner.And("the Published Provider is available in the repository for this specification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table295 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table295.AddRow(new string[] {
                        "ProviderId",
                        "1000000"});
            table295.AddRow(new string[] {
                        "Name",
                        "Maintained School 1 - Changed"});
            table295.AddRow(new string[] {
                        "Authority",
                        "Local Authority 1"});
            table295.AddRow(new string[] {
                        "DateOpened",
                        "2012-03-15"});
            table295.AddRow(new string[] {
                        "LACode",
                        "200"});
            table295.AddRow(new string[] {
                        "LocalAuthorityName",
                        "Maintained School 1"});
            table295.AddRow(new string[] {
                        "ProviderType",
                        "LA maintained schools"});
            table295.AddRow(new string[] {
                        "ProviderSubType",
                        "Community school"});
            table295.AddRow(new string[] {
                        "ProviderVersionId",
                        "dsg-providers-2.0"});
            table295.AddRow(new string[] {
                        "TrustStatus",
                        "Not Supported By A Trust"});
            table295.AddRow(new string[] {
                        "UKPRN",
                        "1000000"});
#line 131
 testRunner.And("the following provider exists within core provider data in provider version \'dsg-" +
                    "providers-2.0\'", ((string)(null)), table295, "And ");
#line 144
 testRunner.And("the provider with id \'1000000\' should be a scoped provider in the current specifi" +
                    "cation in provider version \'dsg-providers-2.0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table296 = new TechTalk.SpecFlow.Table(new string[] {
                        "CalculationType",
                        "CalculationId",
                        "Name",
                        "PublishStatus"});
            table296.AddRow(new string[] {
                        "Template",
                        "5cfb28de-88d6-4faa-a936-d81a065fb596",
                        "Stub for total funding",
                        "Approved"});
#line 145
 testRunner.And("calculation meta data exists for \'DSG\'", ((string)(null)), table296, "And ");
#line 148
 testRunner.And("variations are enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table297 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Order"});
            table297.AddRow(new string[] {
                        "ProviderMetadata",
                        "0"});
            table297.AddRow(new string[] {
                        "DsgTotalAllocationChange",
                        "1"});
            table297.AddRow(new string[] {
                        "FundingUpdated",
                        "2"});
            table297.AddRow(new string[] {
                        "ProfilingUpdated",
                        "3"});
#line 149
 testRunner.And("the funding configuration has the following funding variations", ((string)(null)), table297, "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("When the total allocation increases")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RefreshDsgVariations")]
        public virtual void WhenTheTotalAllocationIncreases()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When the total allocation increases", null, ((string[])(null)));
#line 156
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table298 = new TechTalk.SpecFlow.Table(new string[] {
                        "FundingStreamId",
                        "FundingLineId",
                        "PeriodType",
                        "TypeValue",
                        "Year",
                        "Occurrence"});
            table298.AddRow(new string[] {
                        "DSG",
                        "DSG-002",
                        "CalenderMonth",
                        "June",
                        "2021",
                        "1"});
#line 157
    testRunner.Given("the following variation pointers exist", ((string)(null)), table298, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table299 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value",
                        "Id"});
            table299.AddRow(new string[] {
                        "21000",
                        "5cfb28de-88d6-4faa-a936-d81a065fb596"});
#line 160
 testRunner.And("the following calculation results also exist", ((string)(null)), table299, "And ");
#line hidden
            TechTalk.SpecFlow.Table table300 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriodId",
                        "Value"});
            table300.AddRow(new string[] {
                        "FY-2021",
                        "21000"});
#line 163
 testRunner.And("the following distribution periods exist", ((string)(null)), table300, "And ");
#line hidden
            TechTalk.SpecFlow.Table table301 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriodId",
                        "Type",
                        "TypeValue",
                        "Year",
                        "Occurrence",
                        "ProfiledValue"});
            table301.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "April",
                        "2021",
                        "1",
                        "3000"});
            table301.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "May",
                        "2021",
                        "1",
                        "3000"});
            table301.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "June",
                        "2021",
                        "1",
                        "3000"});
            table301.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "July",
                        "2021",
                        "1",
                        "3000"});
            table301.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "August",
                        "2021",
                        "1",
                        "3000"});
            table301.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "September",
                        "2021",
                        "1",
                        "3000"});
            table301.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "October",
                        "2021",
                        "1",
                        "3000"});
#line 166
 testRunner.And("the following profiles exist", ((string)(null)), table301, "And ");
#line 175
 testRunner.When("funding is refreshed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table302 = new TechTalk.SpecFlow.Table(new string[] {
                        "FundingLineCode",
                        "DistributionPeriodId",
                        "Type",
                        "TypeValue",
                        "Year",
                        "Occurrence",
                        "ProfiledValue"});
            table302.AddRow(new string[] {
                        "DSG-002",
                        "FY-2021",
                        "CalendarMonth",
                        "April",
                        "2021",
                        "1",
                        "2000"});
            table302.AddRow(new string[] {
                        "DSG-002",
                        "FY-2021",
                        "CalendarMonth",
                        "May",
                        "2021",
                        "1",
                        "2000"});
            table302.AddRow(new string[] {
                        "DSG-002",
                        "FY-2021",
                        "CalendarMonth",
                        "June",
                        "2021",
                        "1",
                        "5000"});
            table302.AddRow(new string[] {
                        "DSG-002",
                        "FY-2021",
                        "CalendarMonth",
                        "July",
                        "2021",
                        "1",
                        "3000"});
            table302.AddRow(new string[] {
                        "DSG-002",
                        "FY-2021",
                        "CalendarMonth",
                        "August",
                        "2021",
                        "1",
                        "3000"});
            table302.AddRow(new string[] {
                        "DSG-002",
                        "FY-2021",
                        "CalendarMonth",
                        "September",
                        "2021",
                        "1",
                        "3000"});
            table302.AddRow(new string[] {
                        "DSG-002",
                        "FY-2021",
                        "CalendarMonth",
                        "October",
                        "2021",
                        "1",
                        "3000"});
#line 176
 testRunner.Then("the upserted provider version for \'1000000\' has the following funding line profil" +
                    "e periods", ((string)(null)), table302, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table303 = new TechTalk.SpecFlow.Table(new string[] {
                        "FundingLineCode",
                        "Value"});
            table303.AddRow(new string[] {
                        "TotalAllocation",
                        "21000"});
#line 185
 testRunner.And("the upserted provider version for \'1000000\' has the funding line totals", ((string)(null)), table303, "And ");
#line 188
 testRunner.And("the upserted provider version for \'1000000\' has no funding line over payments for" +
                    " funding line \'DSG-002\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table304 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProviderId",
                        "VariationReason"});
            table304.AddRow(new string[] {
                        "1000000",
                        "FundingUpdated"});
            table304.AddRow(new string[] {
                        "1000000",
                        "NameFieldUpdated"});
            table304.AddRow(new string[] {
                        "1000000",
                        "ProfilingUpdated"});
#line 189
 testRunner.And("the provider variation reasons were recorded", ((string)(null)), table304, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("When the total allocation decreases but repaid in period")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RefreshDsgVariations")]
        public virtual void WhenTheTotalAllocationDecreasesButRepaidInPeriod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When the total allocation decreases but repaid in period", null, ((string[])(null)));
#line 195
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table305 = new TechTalk.SpecFlow.Table(new string[] {
                        "FundingStreamId",
                        "FundingLineId",
                        "PeriodType",
                        "TypeValue",
                        "Year",
                        "Occurrence"});
            table305.AddRow(new string[] {
                        "DSG",
                        "DSG-002",
                        "CalenderMonth",
                        "May",
                        "2021",
                        "1"});
#line 196
    testRunner.Given("the following variation pointers exist", ((string)(null)), table305, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table306 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value",
                        "Id"});
            table306.AddRow(new string[] {
                        "3500",
                        "5cfb28de-88d6-4faa-a936-d81a065fb596"});
#line 199
 testRunner.And("the following calculation results also exist", ((string)(null)), table306, "And ");
#line hidden
            TechTalk.SpecFlow.Table table307 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriodId",
                        "Value"});
            table307.AddRow(new string[] {
                        "FY-2021",
                        "3500"});
#line 202
 testRunner.And("the following distribution periods exist", ((string)(null)), table307, "And ");
#line hidden
            TechTalk.SpecFlow.Table table308 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriodId",
                        "Type",
                        "TypeValue",
                        "Year",
                        "Occurrence",
                        "ProfiledValue"});
            table308.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "April",
                        "2021",
                        "1",
                        "500"});
            table308.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "May",
                        "2021",
                        "1",
                        "500"});
            table308.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "June",
                        "2021",
                        "1",
                        "500"});
            table308.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "July",
                        "2021",
                        "1",
                        "500"});
            table308.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "August",
                        "2021",
                        "1",
                        "500"});
            table308.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "September",
                        "2021",
                        "1",
                        "500"});
            table308.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "October",
                        "2021",
                        "1",
                        "500"});
#line 205
 testRunner.And("the following profiles exist", ((string)(null)), table308, "And ");
#line 214
 testRunner.When("funding is refreshed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table309 = new TechTalk.SpecFlow.Table(new string[] {
                        "FundingLineCode",
                        "DistributionPeriodId",
                        "Type",
                        "TypeValue",
                        "Year",
                        "Occurrence",
                        "ProfiledValue"});
            table309.AddRow(new string[] {
                        "DSG-002",
                        "FY-2021",
                        "CalendarMonth",
                        "April",
                        "2021",
                        "1",
                        "2000"});
            table309.AddRow(new string[] {
                        "DSG-002",
                        "FY-2021",
                        "CalendarMonth",
                        "May",
                        "2021",
                        "1",
                        "0"});
            table309.AddRow(new string[] {
                        "DSG-002",
                        "FY-2021",
                        "CalendarMonth",
                        "June",
                        "2021",
                        "1",
                        "0"});
            table309.AddRow(new string[] {
                        "DSG-002",
                        "FY-2021",
                        "CalendarMonth",
                        "July",
                        "2021",
                        "1",
                        "0"});
            table309.AddRow(new string[] {
                        "DSG-002",
                        "FY-2021",
                        "CalendarMonth",
                        "August",
                        "2021",
                        "1",
                        "500"});
            table309.AddRow(new string[] {
                        "DSG-002",
                        "FY-2021",
                        "CalendarMonth",
                        "September",
                        "2021",
                        "1",
                        "500"});
            table309.AddRow(new string[] {
                        "DSG-002",
                        "FY-2021",
                        "CalendarMonth",
                        "October",
                        "2021",
                        "1",
                        "500"});
#line 215
 testRunner.Then("the upserted provider version for \'1000000\' has the following funding line profil" +
                    "e periods", ((string)(null)), table309, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table310 = new TechTalk.SpecFlow.Table(new string[] {
                        "FundingLineCode",
                        "Value"});
            table310.AddRow(new string[] {
                        "TotalAllocation",
                        "3500"});
#line 224
 testRunner.And("the upserted provider version for \'1000000\' has the funding line totals", ((string)(null)), table310, "And ");
#line 227
 testRunner.And("the upserted provider version for \'1000000\' has no funding line over payments for" +
                    " funding line \'DSG-002\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table311 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProviderId",
                        "VariationReason"});
            table311.AddRow(new string[] {
                        "1000000",
                        "FundingUpdated"});
            table311.AddRow(new string[] {
                        "1000000",
                        "NameFieldUpdated"});
            table311.AddRow(new string[] {
                        "1000000",
                        "ProfilingUpdated"});
#line 228
 testRunner.And("the provider variation reasons were recorded", ((string)(null)), table311, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("When the total allocation decreases and leaves an overpayment outside of the peri" +
            "od")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RefreshDsgVariations")]
        public virtual void WhenTheTotalAllocationDecreasesAndLeavesAnOverpaymentOutsideOfThePeriod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When the total allocation decreases and leaves an overpayment outside of the peri" +
                    "od", null, ((string[])(null)));
#line 234
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table312 = new TechTalk.SpecFlow.Table(new string[] {
                        "FundingStreamId",
                        "FundingLineId",
                        "PeriodType",
                        "TypeValue",
                        "Year",
                        "Occurrence"});
            table312.AddRow(new string[] {
                        "DSG",
                        "DSG-002",
                        "CalenderMonth",
                        "September",
                        "2021",
                        "1"});
#line 235
    testRunner.Given("the following variation pointers exist", ((string)(null)), table312, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table313 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value",
                        "Id"});
            table313.AddRow(new string[] {
                        "3500",
                        "5cfb28de-88d6-4faa-a936-d81a065fb596"});
#line 238
 testRunner.And("the following calculation results also exist", ((string)(null)), table313, "And ");
#line hidden
            TechTalk.SpecFlow.Table table314 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriodId",
                        "Value"});
            table314.AddRow(new string[] {
                        "FY-2021",
                        "3500"});
#line 241
 testRunner.And("the following distribution periods exist", ((string)(null)), table314, "And ");
#line hidden
            TechTalk.SpecFlow.Table table315 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriodId",
                        "Type",
                        "TypeValue",
                        "Year",
                        "Occurrence",
                        "ProfiledValue"});
            table315.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "April",
                        "2021",
                        "1",
                        "500"});
            table315.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "May",
                        "2021",
                        "1",
                        "500"});
            table315.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "June",
                        "2021",
                        "1",
                        "500"});
            table315.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "July",
                        "2021",
                        "1",
                        "500"});
            table315.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "August",
                        "2021",
                        "1",
                        "500"});
            table315.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "September",
                        "2021",
                        "1",
                        "500"});
            table315.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "October",
                        "2021",
                        "1",
                        "500"});
#line 244
 testRunner.And("the following profiles exist", ((string)(null)), table315, "And ");
#line 253
 testRunner.When("funding is refreshed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table316 = new TechTalk.SpecFlow.Table(new string[] {
                        "FundingLineCode",
                        "DistributionPeriodId",
                        "Type",
                        "TypeValue",
                        "Year",
                        "Occurrence",
                        "ProfiledValue"});
            table316.AddRow(new string[] {
                        "DSG-002",
                        "FY-2021",
                        "CalendarMonth",
                        "April",
                        "2021",
                        "1",
                        "2000"});
            table316.AddRow(new string[] {
                        "DSG-002",
                        "FY-2021",
                        "CalendarMonth",
                        "May",
                        "2021",
                        "1",
                        "2000"});
            table316.AddRow(new string[] {
                        "DSG-002",
                        "FY-2021",
                        "CalendarMonth",
                        "June",
                        "2021",
                        "1",
                        "2000"});
            table316.AddRow(new string[] {
                        "DSG-002",
                        "FY-2021",
                        "CalendarMonth",
                        "July",
                        "2021",
                        "1",
                        "2000"});
            table316.AddRow(new string[] {
                        "DSG-002",
                        "FY-2021",
                        "CalendarMonth",
                        "August",
                        "2021",
                        "1",
                        "2000"});
            table316.AddRow(new string[] {
                        "DSG-002",
                        "FY-2021",
                        "CalendarMonth",
                        "September",
                        "2021",
                        "1",
                        "0"});
            table316.AddRow(new string[] {
                        "DSG-002",
                        "FY-2021",
                        "CalendarMonth",
                        "October",
                        "2021",
                        "1",
                        "0"});
#line 254
 testRunner.Then("the upserted provider version for \'1000000\' has the following funding line profil" +
                    "e periods", ((string)(null)), table316, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table317 = new TechTalk.SpecFlow.Table(new string[] {
                        "FundingLineCode",
                        "Value"});
            table317.AddRow(new string[] {
                        "TotalAllocation",
                        "10000"});
#line 263
 testRunner.And("the upserted provider version for \'1000000\' has the funding line totals", ((string)(null)), table317, "And ");
#line hidden
            TechTalk.SpecFlow.Table table318 = new TechTalk.SpecFlow.Table(new string[] {
                        "FundingLineCode",
                        "OverPayment"});
            table318.AddRow(new string[] {
                        "DSG-002",
                        "6500"});
#line 266
 testRunner.And("the upserted provider version for \'1000000\' has the following funding line over p" +
                    "ayments", ((string)(null)), table318, "And ");
#line hidden
            TechTalk.SpecFlow.Table table319 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProviderId",
                        "VariationReason"});
            table319.AddRow(new string[] {
                        "1000000",
                        "FundingUpdated"});
            table319.AddRow(new string[] {
                        "1000000",
                        "NameFieldUpdated"});
            table319.AddRow(new string[] {
                        "1000000",
                        "ProfilingUpdated"});
#line 269
 testRunner.And("the provider variation reasons were recorded", ((string)(null)), table319, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
