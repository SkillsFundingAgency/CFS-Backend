// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CalculateFunding.Publishing.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class RefreshDsgVariationsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "RefreshDsgVariations.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "RefreshDsgVariations", "\tIn order to refresh funding for DSG\r\n\tAs a funding approver\r\n\tI want to refresh " +
                    "funding for all approved providers within a specification\r\n\tAnd for variations w" +
                    "ith the allocations to be taken into account ", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "RefreshDsgVariations")))
            {
                global::CalculateFunding.Publishing.AcceptanceTests.Features.RefreshDsgVariationsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
            TechTalk.SpecFlow.Table table663 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table663.AddRow(new string[] {
                        "DefaultTemplateVersion",
                        "2.0"});
#line 8
 testRunner.Given("a funding configuration exists for funding stream \'DSG\' in funding period \'FY-202" +
                    "1\'", ((string)(null)), table663, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table664 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table664.AddRow(new string[] {
                        "GroupTypeIdentifier",
                        "UKPRN"});
            table664.AddRow(new string[] {
                        "GroupingReason",
                        "Payment"});
            table664.AddRow(new string[] {
                        "GroupTypeClassification",
                        "LegalEntity"});
            table664.AddRow(new string[] {
                        "OrganisationGroupTypeCode",
                        "LocalAuthority"});
#line 11
 testRunner.And("the funding configuration has the following organisation group", ((string)(null)), table664, "And ");
#line hidden
#line 17
 testRunner.And("the funding configuration is available in the policies repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table665 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table665.AddRow(new string[] {
                        "GroupTypeIdentifier",
                        "LACode"});
            table665.AddRow(new string[] {
                        "GroupingReason",
                        "Information"});
            table665.AddRow(new string[] {
                        "GroupTypeClassification",
                        "GeographicalBoundary"});
            table665.AddRow(new string[] {
                        "OrganisationGroupTypeCode",
                        "LocalAuthority"});
#line 18
 testRunner.And("the funding configuration has the following organisation group", ((string)(null)), table665, "And ");
#line hidden
#line 24
 testRunner.And("the funding configuration is available in the policies repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table666 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table666.AddRow(new string[] {
                        "GroupTypeIdentifier",
                        "LocalAuthorityClassificationTypeCode"});
            table666.AddRow(new string[] {
                        "GroupingReason",
                        "Information"});
            table666.AddRow(new string[] {
                        "GroupTypeClassification",
                        "GeographicalBoundary"});
            table666.AddRow(new string[] {
                        "OrganisationGroupTypeCode",
                        "LocalGovernmentGroup"});
#line 25
 testRunner.And("the funding configuration has the following organisation group", ((string)(null)), table666, "And ");
#line hidden
#line 31
 testRunner.And("the funding configuration is available in the policies repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table667 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table667.AddRow(new string[] {
                        "GroupTypeIdentifier",
                        "GovernmentOfficeRegionCode"});
            table667.AddRow(new string[] {
                        "GroupingReason",
                        "Information"});
            table667.AddRow(new string[] {
                        "GroupTypeClassification",
                        "GeographicalBoundary"});
            table667.AddRow(new string[] {
                        "OrganisationGroupTypeCode",
                        "GovernmentOfficeRegion"});
#line 32
 testRunner.And("the funding configuration has the following organisation group", ((string)(null)), table667, "And ");
#line hidden
#line 38
 testRunner.And("the funding configuration is available in the policies repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table668 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table668.AddRow(new string[] {
                        "GroupTypeIdentifier",
                        "CountryCode"});
            table668.AddRow(new string[] {
                        "GroupingReason",
                        "Information"});
            table668.AddRow(new string[] {
                        "GroupTypeClassification",
                        "GeographicalBoundary"});
            table668.AddRow(new string[] {
                        "OrganisationGroupTypeCode",
                        "Country"});
#line 39
 testRunner.And("the funding configuration has the following organisation group", ((string)(null)), table668, "And ");
#line hidden
#line 45
 testRunner.And("the funding configuration is available in the policies repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table669 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table669.AddRow(new string[] {
                        "Id",
                        "FY-2021"});
            table669.AddRow(new string[] {
                        "Name",
                        "Financial Year 2020-21"});
            table669.AddRow(new string[] {
                        "StartDate",
                        "2019-08-01 00:00:00"});
            table669.AddRow(new string[] {
                        "EndDate",
                        "2020-07-31 00:00:00"});
            table669.AddRow(new string[] {
                        "Period",
                        "2021"});
            table669.AddRow(new string[] {
                        "Type",
                        "FY"});
#line 46
 testRunner.And("the funding period exists in the policies service", ((string)(null)), table669, "And ");
#line hidden
            TechTalk.SpecFlow.Table table670 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table670.AddRow(new string[] {
                        "Id",
                        "specForPublishing"});
            table670.AddRow(new string[] {
                        "Name",
                        "Test Specification for Publishing"});
            table670.AddRow(new string[] {
                        "IsSelectedForFunding",
                        "true"});
            table670.AddRow(new string[] {
                        "ProviderVersionId",
                        "dsg-providers-2.0"});
#line 54
 testRunner.And("the following specification exists", ((string)(null)), table670, "And ");
#line hidden
#line 60
 testRunner.And("the specification has the funding period with id \'FY-2021\' and name \'Financial Ye" +
                    "ar 2020-21\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table671 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Id"});
            table671.AddRow(new string[] {
                        "DSG",
                        "DSG"});
#line 61
 testRunner.And("the specification has the following funding streams", ((string)(null)), table671, "And ");
#line hidden
            TechTalk.SpecFlow.Table table672 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table672.AddRow(new string[] {
                        "DSG",
                        "2.0"});
#line 64
 testRunner.And("the specification has the following template versions for funding streams", ((string)(null)), table672, "And ");
#line hidden
#line 67
 testRunner.And("the specification is approved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table673 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table673.AddRow(new string[] {
                        "StatusChangedDate",
                        "2019-09-27 00:00:00"});
            table673.AddRow(new string[] {
                        "ExternalPublicationDate",
                        "2019-09-28 00:00:00"});
            table673.AddRow(new string[] {
                        "EarliestPaymentAvailableDate",
                        "2019-09-29 00:00:00"});
#line 68
 testRunner.And("the publishing dates for the specifcation are set as following", ((string)(null)), table673, "And ");
#line hidden
            TechTalk.SpecFlow.Table table674 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table674.AddRow(new string[] {
                        "JobDefinitionId",
                        "PublishFundingJob"});
            table674.AddRow(new string[] {
                        "InvokerUserId",
                        "PublishUserId"});
            table674.AddRow(new string[] {
                        "InvokerUserDisplayName",
                        "Invoker User"});
            table674.AddRow(new string[] {
                        "ParentJobId",
                        ""});
#line 73
 testRunner.And("the following job is requested to be queued for the current specification", ((string)(null)), table674, "And ");
#line hidden
#line 79
 testRunner.And("the job is submitted to the job service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table675 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table675.AddRow(new string[] {
                        "ProviderVersionId",
                        "dsg-providers-2.0"});
            table675.AddRow(new string[] {
                        "VersionType",
                        "Custom"});
            table675.AddRow(new string[] {
                        "Name",
                        "DSG Provider Version"});
            table675.AddRow(new string[] {
                        "Description",
                        "Acceptance Tests"});
            table675.AddRow(new string[] {
                        "Version",
                        "2"});
            table675.AddRow(new string[] {
                        "TargetDate",
                        "2019-12-12 00:00"});
            table675.AddRow(new string[] {
                        "FundingStream",
                        "DSG"});
            table675.AddRow(new string[] {
                        "Created",
                        "2019-12-11 00:00"});
#line 80
 testRunner.And("the following provider version exists in the providers service", ((string)(null)), table675, "And ");
#line hidden
            TechTalk.SpecFlow.Table table676 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table676.AddRow(new string[] {
                        "ProviderId",
                        "1000000"});
            table676.AddRow(new string[] {
                        "FundingStreamId",
                        "DSG"});
            table676.AddRow(new string[] {
                        "FundingPeriodId",
                        "FY-2021"});
            table676.AddRow(new string[] {
                        "TemplateVersion",
                        "1.0"});
            table676.AddRow(new string[] {
                        "Status",
                        "Released"});
            table676.AddRow(new string[] {
                        "TotalFunding",
                        "14000"});
            table676.AddRow(new string[] {
                        "MajorVersion",
                        "0"});
            table676.AddRow(new string[] {
                        "MinorVersion",
                        "1"});
#line 90
 testRunner.And("the following Published Provider has been previously generated for the current sp" +
                    "ecification", ((string)(null)), table676, "And ");
#line hidden
            TechTalk.SpecFlow.Table table677 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "FundingLineCode",
                        "Value",
                        "TemplateLineId",
                        "Type"});
            table677.AddRow(new string[] {
                        "Total DSG after deductions and recoupment",
                        "DSG-002",
                        "14000",
                        "3",
                        "Payment"});
#line 100
 testRunner.And("the Published Provider has the following funding lines", ((string)(null)), table677, "And ");
#line hidden
            TechTalk.SpecFlow.Table table678 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriodId",
                        "Value"});
            table678.AddRow(new string[] {
                        "FY-2021",
                        "14000"});
#line 103
 testRunner.And("the Published Provider has the following distribution period for funding line \'DS" +
                    "G-002\'", ((string)(null)), table678, "And ");
#line hidden
            TechTalk.SpecFlow.Table table679 = new TechTalk.SpecFlow.Table(new string[] {
                        "DistributionPeriodId",
                        "Type",
                        "TypeValue",
                        "Year",
                        "Occurrence",
                        "ProfiledValue"});
            table679.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "April",
                        "2021",
                        "1",
                        "2000"});
            table679.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "May",
                        "2021",
                        "1",
                        "2000"});
            table679.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "June",
                        "2021",
                        "1",
                        "2000"});
            table679.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "July",
                        "2021",
                        "1",
                        "2000"});
            table679.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "August",
                        "2021",
                        "1",
                        "2000"});
            table679.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "September",
                        "2021",
                        "1",
                        "2000"});
            table679.AddRow(new string[] {
                        "FY-2021",
                        "CalendarMonth",
                        "October",
                        "2021",
                        "1",
                        "2000"});
#line 106
 testRunner.And("the Published Providers distribution period has the following profiles for fundin" +
                    "g line \'DSG-002\'", ((string)(null)), table679, "And ");
#line hidden
            TechTalk.SpecFlow.Table table680 = new TechTalk.SpecFlow.Table(new string[] {
                        "EntityType",
                        "CalculationId",
                        "TemplateId",
                        "Name"});
            table680.AddRow(new string[] {
                        "Calculation",
                        "5cfb28de-88d6-4faa-a936-d81a065fb596",
                        "219",
                        "Stub for total funding"});
#line 115
 testRunner.And("template mapping exists", ((string)(null)), table680, "And ");
#line hidden
            TechTalk.SpecFlow.Table table681 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table681.AddRow(new string[] {
                        "ProviderId",
                        "1000000"});
            table681.AddRow(new string[] {
                        "Name",
                        "Maintained School 1"});
            table681.AddRow(new string[] {
                        "Authority",
                        "Local Authority 1"});
            table681.AddRow(new string[] {
                        "DateOpened",
                        "2012-03-15"});
            table681.AddRow(new string[] {
                        "LACode",
                        "200"});
            table681.AddRow(new string[] {
                        "LocalAuthorityName",
                        "Maintained School 1"});
            table681.AddRow(new string[] {
                        "ProviderType",
                        "LA maintained schools"});
            table681.AddRow(new string[] {
                        "ProviderSubType",
                        "Community school"});
            table681.AddRow(new string[] {
                        "ProviderVersionId",
                        "dsg-providers-2.0"});
            table681.AddRow(new string[] {
                        "TrustStatus",
                        "Not Supported By A Trust"});
            table681.AddRow(new string[] {
                        "UKPRN",
                        "1000000"});
#line 118
 testRunner.And("the Published Provider has the following provider information", ((string)(null)), table681, "And ");
#line hidden
#line 131
 testRunner.And("the Published Provider is available in the repository for this specification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table682 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table682.AddRow(new string[] {
                        "ProviderId",
                        "1000000"});
            table682.AddRow(new string[] {
                        "Name",
                        "Maintained School 1 - Changed"});
            table682.AddRow(new string[] {
                        "Authority",
                        "Local Authority 1"});
            table682.AddRow(new string[] {
                        "DateOpened",
                        "2012-03-15"});
            table682.AddRow(new string[] {
                        "LACode",
                        "200"});
            table682.AddRow(new string[] {
                        "LocalAuthorityName",
                        "Maintained School 1"});
            table682.AddRow(new string[] {
                        "ProviderType",
                        "LA maintained schools"});
            table682.AddRow(new string[] {
                        "ProviderSubType",
                        "Community school"});
            table682.AddRow(new string[] {
                        "ProviderVersionId",
                        "dsg-providers-2.0"});
            table682.AddRow(new string[] {
                        "TrustStatus",
                        "Not Supported By A Trust"});
            table682.AddRow(new string[] {
                        "UKPRN",
                        "1000000"});
#line 132
 testRunner.And("the following provider exists within core provider data in provider version \'dsg-" +
                    "providers-2.0\'", ((string)(null)), table682, "And ");
#line hidden
#line 145
 testRunner.And("the provider with id \'1000000\' should be a scoped provider in the current specifi" +
                    "cation in provider version \'dsg-providers-2.0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table683 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table683.AddRow(new string[] {
                        "ProviderId",
                        "9000000"});
            table683.AddRow(new string[] {
                        "Name",
                        "Local Authority 1"});
            table683.AddRow(new string[] {
                        "Authority",
                        "Local Authority 1"});
            table683.AddRow(new string[] {
                        "DateOpened",
                        "2012-03-15"});
            table683.AddRow(new string[] {
                        "LACode",
                        "200"});
            table683.AddRow(new string[] {
                        "LocalAuthorityName",
                        "Local Authority 1"});
            table683.AddRow(new string[] {
                        "ProviderType",
                        "Local Authority"});
            table683.AddRow(new string[] {
                        "ProviderSubType",
                        "Local Authority"});
            table683.AddRow(new string[] {
                        "ProviderVersionId",
                        "<ProviderVersionId>"});
            table683.AddRow(new string[] {
                        "TrustStatus",
                        "Not Supported By A Trust"});
            table683.AddRow(new string[] {
                        "UKPRN",
                        "9000000"});
#line 147
 testRunner.And("the following provider exists within core provider data in provider version \'dsg-" +
                    "providers-2.0\'", ((string)(null)), table683, "And ");
#line hidden
            TechTalk.SpecFlow.Table table684 = new TechTalk.SpecFlow.Table(new string[] {
                        "CalculationType",
                        "CalculationId",
                        "Name",
                        "PublishStatus"});
            table684.AddRow(new string[] {
                        "Template",
                        "5cfb28de-88d6-4faa-a936-d81a065fb596",
                        "Stub for total funding",
                        "Approved"});
#line 160
 testRunner.And("calculation meta data exists for \'DSG\'", ((string)(null)), table684, "And ");
#line hidden
#line 163
 testRunner.And("variations are enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table685 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Order"});
            table685.AddRow(new string[] {
                        "ProviderMetadata",
                        "0"});
            table685.AddRow(new string[] {
                        "DsgTotalAllocationChange",
                        "1"});
            table685.AddRow(new string[] {
                        "FundingUpdated",
                        "2"});
            table685.AddRow(new string[] {
                        "ProfilingUpdated",
                        "3"});
            table685.AddRow(new string[] {
                        "PupilNumberSuccessor",
                        "4"});
#line 164
 testRunner.And("the funding configuration has the following funding variations", ((string)(null)), table685, "And ");
#line hidden
            TechTalk.SpecFlow.Table table686 = new TechTalk.SpecFlow.Table(new string[] {
                        "FundingStreamId",
                        "FundingPeriodId"});
            table686.AddRow(new string[] {
                        "DSG",
                        "FY-2021"});
#line 171
 testRunner.And("the following profile pattern exists", ((string)(null)), table686, "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("When the total allocation increases")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RefreshDsgVariations")]
        public virtual void WhenTheTotalAllocationIncreases()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When the total allocation increases", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 175
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table687 = new TechTalk.SpecFlow.Table(new string[] {
                            "FundingStreamId",
                            "FundingLineId",
                            "PeriodType",
                            "TypeValue",
                            "Year",
                            "Occurrence"});
                table687.AddRow(new string[] {
                            "DSG",
                            "DSG-002",
                            "CalenderMonth",
                            "June",
                            "2021",
                            "1"});
#line 176
    testRunner.Given("the following variation pointers exist", ((string)(null)), table687, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table688 = new TechTalk.SpecFlow.Table(new string[] {
                            "Value",
                            "Id"});
                table688.AddRow(new string[] {
                            "21000",
                            "5cfb28de-88d6-4faa-a936-d81a065fb596"});
#line 179
 testRunner.And("the following calculation results also exist", ((string)(null)), table688, "And ");
#line hidden
                TechTalk.SpecFlow.Table table689 = new TechTalk.SpecFlow.Table(new string[] {
                            "DistributionPeriodId",
                            "Value"});
                table689.AddRow(new string[] {
                            "FY-2021",
                            "21000"});
#line 182
 testRunner.And("the following distribution periods exist", ((string)(null)), table689, "And ");
#line hidden
                TechTalk.SpecFlow.Table table690 = new TechTalk.SpecFlow.Table(new string[] {
                            "DistributionPeriodId",
                            "Type",
                            "TypeValue",
                            "Year",
                            "Occurrence",
                            "ProfiledValue"});
                table690.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "April",
                            "2021",
                            "1",
                            "3000"});
                table690.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "May",
                            "2021",
                            "1",
                            "3000"});
                table690.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "June",
                            "2021",
                            "1",
                            "3000"});
                table690.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "July",
                            "2021",
                            "1",
                            "3000"});
                table690.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "August",
                            "2021",
                            "1",
                            "3000"});
                table690.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "September",
                            "2021",
                            "1",
                            "3000"});
                table690.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "October",
                            "2021",
                            "1",
                            "3000"});
#line 185
 testRunner.And("the following profiles exist", ((string)(null)), table690, "And ");
#line hidden
#line 194
 testRunner.When("funding is refreshed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table691 = new TechTalk.SpecFlow.Table(new string[] {
                            "FundingLineCode",
                            "DistributionPeriodId",
                            "Type",
                            "TypeValue",
                            "Year",
                            "Occurrence",
                            "ProfiledValue"});
                table691.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "April",
                            "2021",
                            "1",
                            "2000"});
                table691.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "May",
                            "2021",
                            "1",
                            "2000"});
                table691.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "June",
                            "2021",
                            "1",
                            "5000"});
                table691.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "July",
                            "2021",
                            "1",
                            "3000"});
                table691.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "August",
                            "2021",
                            "1",
                            "3000"});
                table691.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "September",
                            "2021",
                            "1",
                            "3000"});
                table691.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "October",
                            "2021",
                            "1",
                            "3000"});
#line 195
 testRunner.Then("the upserted provider version for \'1000000\' has the following funding line profil" +
                        "e periods", ((string)(null)), table691, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table692 = new TechTalk.SpecFlow.Table(new string[] {
                            "FundingLineCode",
                            "Value"});
                table692.AddRow(new string[] {
                            "TotalAllocation",
                            "21000"});
#line 204
 testRunner.And("the upserted provider version for \'1000000\' has the funding line totals", ((string)(null)), table692, "And ");
#line hidden
#line 207
 testRunner.And("the upserted provider version for \'1000000\' has no funding line over payments for" +
                        " funding line \'DSG-002\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table693 = new TechTalk.SpecFlow.Table(new string[] {
                            "ProviderId",
                            "VariationReason"});
                table693.AddRow(new string[] {
                            "1000000",
                            "FundingUpdated"});
                table693.AddRow(new string[] {
                            "1000000",
                            "NameFieldUpdated"});
                table693.AddRow(new string[] {
                            "1000000",
                            "ProfilingUpdated"});
#line 208
 testRunner.And("the provider variation reasons were recorded", ((string)(null)), table693, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("When the total allocation decreases but repaid in period")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RefreshDsgVariations")]
        public virtual void WhenTheTotalAllocationDecreasesButRepaidInPeriod()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When the total allocation decreases but repaid in period", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 214
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table694 = new TechTalk.SpecFlow.Table(new string[] {
                            "FundingStreamId",
                            "FundingLineId",
                            "PeriodType",
                            "TypeValue",
                            "Year",
                            "Occurrence"});
                table694.AddRow(new string[] {
                            "DSG",
                            "DSG-002",
                            "CalenderMonth",
                            "May",
                            "2021",
                            "1"});
#line 215
    testRunner.Given("the following variation pointers exist", ((string)(null)), table694, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table695 = new TechTalk.SpecFlow.Table(new string[] {
                            "Value",
                            "Id"});
                table695.AddRow(new string[] {
                            "3500",
                            "5cfb28de-88d6-4faa-a936-d81a065fb596"});
#line 218
 testRunner.And("the following calculation results also exist", ((string)(null)), table695, "And ");
#line hidden
                TechTalk.SpecFlow.Table table696 = new TechTalk.SpecFlow.Table(new string[] {
                            "DistributionPeriodId",
                            "Value"});
                table696.AddRow(new string[] {
                            "FY-2021",
                            "3500"});
#line 221
 testRunner.And("the following distribution periods exist", ((string)(null)), table696, "And ");
#line hidden
                TechTalk.SpecFlow.Table table697 = new TechTalk.SpecFlow.Table(new string[] {
                            "DistributionPeriodId",
                            "Type",
                            "TypeValue",
                            "Year",
                            "Occurrence",
                            "ProfiledValue"});
                table697.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "April",
                            "2021",
                            "1",
                            "500"});
                table697.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "May",
                            "2021",
                            "1",
                            "500"});
                table697.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "June",
                            "2021",
                            "1",
                            "500"});
                table697.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "July",
                            "2021",
                            "1",
                            "500"});
                table697.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "August",
                            "2021",
                            "1",
                            "500"});
                table697.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "September",
                            "2021",
                            "1",
                            "500"});
                table697.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "October",
                            "2021",
                            "1",
                            "500"});
#line 224
 testRunner.And("the following profiles exist", ((string)(null)), table697, "And ");
#line hidden
#line 233
 testRunner.When("funding is refreshed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table698 = new TechTalk.SpecFlow.Table(new string[] {
                            "FundingLineCode",
                            "DistributionPeriodId",
                            "Type",
                            "TypeValue",
                            "Year",
                            "Occurrence",
                            "ProfiledValue"});
                table698.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "April",
                            "2021",
                            "1",
                            "2000"});
                table698.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "May",
                            "2021",
                            "1",
                            "0"});
                table698.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "June",
                            "2021",
                            "1",
                            "0"});
                table698.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "July",
                            "2021",
                            "1",
                            "0"});
                table698.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "August",
                            "2021",
                            "1",
                            "500"});
                table698.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "September",
                            "2021",
                            "1",
                            "500"});
                table698.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "October",
                            "2021",
                            "1",
                            "500"});
#line 234
 testRunner.Then("the upserted provider version for \'1000000\' has the following funding line profil" +
                        "e periods", ((string)(null)), table698, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table699 = new TechTalk.SpecFlow.Table(new string[] {
                            "FundingLineCode",
                            "Value"});
                table699.AddRow(new string[] {
                            "TotalAllocation",
                            "3500"});
#line 243
 testRunner.And("the upserted provider version for \'1000000\' has the funding line totals", ((string)(null)), table699, "And ");
#line hidden
#line 246
 testRunner.And("the upserted provider version for \'1000000\' has no funding line over payments for" +
                        " funding line \'DSG-002\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table700 = new TechTalk.SpecFlow.Table(new string[] {
                            "ProviderId",
                            "VariationReason"});
                table700.AddRow(new string[] {
                            "1000000",
                            "FundingUpdated"});
                table700.AddRow(new string[] {
                            "1000000",
                            "NameFieldUpdated"});
                table700.AddRow(new string[] {
                            "1000000",
                            "ProfilingUpdated"});
#line 247
 testRunner.And("the provider variation reasons were recorded", ((string)(null)), table700, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("When the total allocation decreases and leaves an overpayment outside of the peri" +
            "od")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RefreshDsgVariations")]
        public virtual void WhenTheTotalAllocationDecreasesAndLeavesAnOverpaymentOutsideOfThePeriod()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When the total allocation decreases and leaves an overpayment outside of the peri" +
                    "od", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 253
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table701 = new TechTalk.SpecFlow.Table(new string[] {
                            "FundingStreamId",
                            "FundingLineId",
                            "PeriodType",
                            "TypeValue",
                            "Year",
                            "Occurrence"});
                table701.AddRow(new string[] {
                            "DSG",
                            "DSG-002",
                            "CalenderMonth",
                            "September",
                            "2021",
                            "1"});
#line 254
    testRunner.Given("the following variation pointers exist", ((string)(null)), table701, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table702 = new TechTalk.SpecFlow.Table(new string[] {
                            "Value",
                            "Id"});
                table702.AddRow(new string[] {
                            "3500",
                            "5cfb28de-88d6-4faa-a936-d81a065fb596"});
#line 257
 testRunner.And("the following calculation results also exist", ((string)(null)), table702, "And ");
#line hidden
                TechTalk.SpecFlow.Table table703 = new TechTalk.SpecFlow.Table(new string[] {
                            "DistributionPeriodId",
                            "Value"});
                table703.AddRow(new string[] {
                            "FY-2021",
                            "3500"});
#line 260
 testRunner.And("the following distribution periods exist", ((string)(null)), table703, "And ");
#line hidden
                TechTalk.SpecFlow.Table table704 = new TechTalk.SpecFlow.Table(new string[] {
                            "DistributionPeriodId",
                            "Type",
                            "TypeValue",
                            "Year",
                            "Occurrence",
                            "ProfiledValue"});
                table704.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "April",
                            "2021",
                            "1",
                            "500"});
                table704.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "May",
                            "2021",
                            "1",
                            "500"});
                table704.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "June",
                            "2021",
                            "1",
                            "500"});
                table704.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "July",
                            "2021",
                            "1",
                            "500"});
                table704.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "August",
                            "2021",
                            "1",
                            "500"});
                table704.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "September",
                            "2021",
                            "1",
                            "500"});
                table704.AddRow(new string[] {
                            "FY-2021",
                            "CalendarMonth",
                            "October",
                            "2021",
                            "1",
                            "500"});
#line 263
 testRunner.And("the following profiles exist", ((string)(null)), table704, "And ");
#line hidden
#line 272
 testRunner.When("funding is refreshed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table705 = new TechTalk.SpecFlow.Table(new string[] {
                            "FundingLineCode",
                            "DistributionPeriodId",
                            "Type",
                            "TypeValue",
                            "Year",
                            "Occurrence",
                            "ProfiledValue"});
                table705.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "April",
                            "2021",
                            "1",
                            "2000"});
                table705.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "May",
                            "2021",
                            "1",
                            "2000"});
                table705.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "June",
                            "2021",
                            "1",
                            "2000"});
                table705.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "July",
                            "2021",
                            "1",
                            "2000"});
                table705.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "August",
                            "2021",
                            "1",
                            "2000"});
                table705.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "September",
                            "2021",
                            "1",
                            "0"});
                table705.AddRow(new string[] {
                            "DSG-002",
                            "FY-2021",
                            "CalendarMonth",
                            "October",
                            "2021",
                            "1",
                            "0"});
#line 273
 testRunner.Then("the upserted provider version for \'1000000\' has the following funding line profil" +
                        "e periods", ((string)(null)), table705, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table706 = new TechTalk.SpecFlow.Table(new string[] {
                            "FundingLineCode",
                            "Value"});
                table706.AddRow(new string[] {
                            "TotalAllocation",
                            "10000"});
#line 282
 testRunner.And("the upserted provider version for \'1000000\' has the funding line totals", ((string)(null)), table706, "And ");
#line hidden
                TechTalk.SpecFlow.Table table707 = new TechTalk.SpecFlow.Table(new string[] {
                            "FundingLineCode",
                            "OverPayment"});
                table707.AddRow(new string[] {
                            "DSG-002",
                            "6500"});
#line 285
 testRunner.And("the upserted provider version for \'1000000\' has the following funding line over p" +
                        "ayments", ((string)(null)), table707, "And ");
#line hidden
                TechTalk.SpecFlow.Table table708 = new TechTalk.SpecFlow.Table(new string[] {
                            "ProviderId",
                            "VariationReason"});
                table708.AddRow(new string[] {
                            "1000000",
                            "FundingUpdated"});
                table708.AddRow(new string[] {
                            "1000000",
                            "NameFieldUpdated"});
                table708.AddRow(new string[] {
                            "1000000",
                            "ProfilingUpdated"});
#line 288
 testRunner.And("the provider variation reasons were recorded", ((string)(null)), table708, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
